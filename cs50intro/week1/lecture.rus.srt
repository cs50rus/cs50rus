1
00:01:23,150 --> 00:01:26,360
ДЭВИД МАЛАН: Это CS50, введение в
информационные технологии

2
00:01:26,360 --> 00:01:28,730
и искусство программирования

3
00:01:28,730 --> 00:01:30,170
от Гарвардского университета

4
00:01:30,170 --> 00:01:32,660
Меня зовут Дэвид Малан, и я сам прошел этот курс

5
00:01:32,660 --> 00:01:35,710
на втором курсе много лет назад.

6
00:01:35,710 --> 00:01:36,980
Еле решился

7
00:01:36,980 --> 00:01:39,540
В то время, я очень сомневался в этой идее

8
00:01:39,540 --> 00:01:42,720
пройти курс информатики

9
00:01:42,720 --> 00:01:44,512
В мой первый год я действительно

10
00:01:44,512 --> 00:01:46,340
склонялся к курсам и кафедрам

11
00:01:46,340 --> 00:01:48,860
с которыми я был более знаком.

12
00:01:48,860 --> 00:01:52,432
Информатика была далеко за пределами моей
зоны комфорта в то время,

13
00:01:52,432 --> 00:01:54,140
это было действительно что-то новое для меня

14
00:01:54,140 --> 00:01:57,290
так что в мой первый год я так и не решился

15
00:01:57,290 --> 00:02:01,070
Но на втором курсе я наконец набрался
смелости, чтобы открыть дверь CS50,

16
00:02:01,070 --> 00:02:05,160
и то только потому, что профессор позволил
мне сдать зачет вместо экзамена.

17
00:02:05,160 --> 00:02:06,110
Я здорово сомневался.

18
00:02:06,110 --> 00:02:09,240
Если бы я только знал, как знаю сейчас,

19
00:02:09,240 --> 00:02:12,320
что 2/3 студентов CS50 никогда раньше не

20
00:02:12,320 --> 00:02:14,270
проходили курс информатики.

21
00:02:14,270 --> 00:02:18,230
Так что если вы чувствуете себя так же
неуверенно сейчас,

22
00:02:18,230 --> 00:02:20,140
или у вас уже есть опыт, но

23
00:02:20,140 --> 00:02:21,890
вы хотите заполнить пробелы в ваших знаниях,

24
00:02:21,890 --> 00:02:23,930
и особенно, если вы самоучка,

25
00:02:23,930 --> 00:02:25,880
Знайте - вы очень в хорошей компании!

26
00:02:25,880 --> 00:02:27,770
И, наконец, самое главное в этом курсе:

27
00:02:27,770 --> 00:02:30,330
не сравнивайте свои результаты с
результатами однокурсников,

28
00:02:30,330 --> 00:02:34,160
но сравнивайте себя нового с собой в самом
начале, то есть,

29
00:02:34,160 --> 00:02:35,570
конечно, сегодня.

30
00:02:35,570 --> 00:02:37,730
Так что же такое информатика?

31
00:02:37,730 --> 00:02:39,970
Чего я так боялся?

32
00:02:39,970 --> 00:02:42,410
Давайте попробуем описать информатику так.

33
00:02:42,410 --> 00:02:44,512
Это просто процесс решения проблем.

34
00:02:44,512 --> 00:02:46,220
А что значит решить проблему?

35
00:02:46,220 --> 00:02:47,510
У вас есть некоторые данные.

36
00:02:47,510 --> 00:02:52,100
И цель состоит в том, чтобы получить
какой-то результат, решение проблемы.

37
00:02:52,100 --> 00:02:54,540
И путь к решению - это информатика.

38
00:02:54,540 --> 00:02:57,290
Мы увидим, что находится в черном ящике на экране

39
00:02:57,290 --> 00:02:59,610
когда начнем заполнять эти пробелы.

40
00:02:59,610 --> 00:03:02,618
Рассматривая проблему,

41
00:03:02,618 --> 00:03:05,660
мы должны договориться, особенно если
мы используем компьютер,

42
00:03:05,660 --> 00:03:08,460
как мы представим эти данные и результат?

43
00:03:08,460 --> 00:03:11,120
И поэтому первая концепция, которую мы исследуем
в информатике,

44
00:03:11,120 --> 00:03:14,210
это то, как представить информацию.

45
00:03:14,210 --> 00:03:16,580
Вероятно, вы уже знаете,

46
00:03:16,580 --> 00:03:19,752
на каком "языке говорят" компьютеры?

47
00:03:19,752 --> 00:03:20,460
АУДИТОРИЯ: На двоичном коде.

48
00:03:20,460 --> 00:03:20,680
ДЭВИД МАЛАН: Да.

49
00:03:20,680 --> 00:03:21,333
Так двоичный, бинарный код.

50
00:03:21,333 --> 00:03:23,750
И если вы никогда раньше не слышали этот
термин, хорошо.

51
00:03:23,750 --> 00:03:25,167
Ну, нули и единицы, если проще.

52
00:03:25,167 --> 00:03:26,500
Как это работает?

53
00:03:26,500 --> 00:03:29,530
Ну, даже если вы знаете, что компьютеры говорят
на двоичном коде,

54
00:03:29,530 --> 00:03:31,690
что бы это ни значило, но вы могли

55
00:03:31,690 --> 00:03:34,720
не задумываться о том, как это
работает, посмотрим, как большинство из нас

56
00:03:34,720 --> 00:03:37,503
учится считать, может быть, сначала на пальцах.

57
00:03:37,503 --> 00:03:39,670
Если я хочу посчитать количество людей в комнате,

58
00:03:39,670 --> 00:03:45,070
Я мог бы сделать 1, 2, 3, 4, 5, поднимая
один палец на каждого человека в комнате.

59
00:03:45,070 --> 00:03:47,290
Это то, что известно как унарная запись.

60
00:03:47,290 --> 00:03:50,590
Uno, подразумевая 1, потому что я просто
поднимаю палец

61
00:03:50,590 --> 00:03:52,990
считая людей в комнате.

62
00:03:52,990 --> 00:03:55,300
Конечно, я могу рассчитывать только на руки.

63
00:03:55,300 --> 00:04:00,520
К счастью, у нас есть много символов в
нашем десятичном мире.

64
00:04:00,520 --> 00:04:03,250
Dec означает 10, у нас есть цифры от 0 до 9.

65
00:04:03,250 --> 00:04:07,120
И оттуда мы можем выразить любые числа, с
которыми мы все знакомы.

66
00:04:07,120 --> 00:04:10,060
Но на компьютерах не так много цифр.

67
00:04:10,060 --> 00:04:12,190
У них только нули и единицы.

68
00:04:12,190 --> 00:04:14,830
И все же, так или иначе, они могут хранить
не только цифры,

69
00:04:14,830 --> 00:04:18,422
но и буквы, и изображения, и видео, и звуки,
и многое другое.

70
00:04:18,422 --> 00:04:19,339
Так как это работает?

71
00:04:19,339 --> 00:04:22,464
Хорошо, давайте рассмотрим то,

72
00:04:22,464 --> 00:04:25,930
как работают телефоны в наших карманах,
ноутбуки на наших столах,

73
00:04:25,930 --> 00:04:28,430
используя только нули и единицы.

74
00:04:28,430 --> 00:04:31,120
Посмотрите на символы на экране.

75
00:04:31,120 --> 00:04:34,210
Что они представляют?

76
00:04:34,210 --> 00:04:36,180
123, но почему?

77
00:04:36,180 --> 00:04:38,640
Я имею в виду, что это буквально символы, чёрточки

78
00:04:38,640 --> 00:04:41,970
на экране, которым мы приписываем значение.

79
00:04:41,970 --> 00:04:43,910
Мы просто видим это как 123.

80
00:04:43,910 --> 00:04:44,610
Но почему?

81
00:04:44,610 --> 00:04:46,860
Ну, когда мы учились считать, нам объяснили,

82
00:04:46,860 --> 00:04:50,520
что надо думать о самой правой цифре, как
о единицах

83
00:04:50,520 --> 00:04:52,410
средняя цифра говорит о десятках,

84
00:04:52,410 --> 00:04:55,410
и самая левая цифра - о сотнях.

85
00:04:55,410 --> 00:04:59,550
Итак, как мы можем получить из 1, 2, 3 число 123?

86
00:04:59,550 --> 00:05:02,430
Ну, это несложная математика, которую мы
все просто делаем инстинктивно.

87
00:05:02,430 --> 00:05:08,730
Это сотня 1 раз, плюс десять 2 раза, плюс один
3 раза.

88
00:05:08,730 --> 00:05:13,800
Это, конечно, дает нам 100 плюс 20 плюс 3,
или 123.

89
00:05:13,800 --> 00:05:16,590
Так что все мы сейчас воспринимаем этот
процесс как должное.

90
00:05:16,590 --> 00:05:19,230
Как видите, здесь есть система

91
00:05:19,230 --> 00:05:23,287
Такая система, что мы можем вычислить любое
число таким же образом.

92
00:05:23,287 --> 00:05:26,370
С помощью единиц, десятков, сотен и так далее

93
00:05:26,370 --> 00:05:28,530
Основа в десятичном мире - это число 1,

94
00:05:28,530 --> 00:05:33,030
это числа 2, 3, 4, 5, 6, 7, 8, 9.

95
00:05:33,030 --> 00:05:35,370
Что-то интересное происходит, конечно, после 9.

96
00:05:35,370 --> 00:05:36,990
Вы вроде переносите единицу.

97
00:05:36,990 --> 00:05:41,190
И почему тогда 010, или если мы игнорируем
ведущие нули как незначимые,

98
00:05:41,190 --> 00:05:45,870
почему один 0 представляет число, которое мы
все знаем, очевидно, как 10?

99
00:05:45,870 --> 00:05:48,900
Ну, просто потому что это 1 раз десять плюс 0
раз один.

100
00:05:48,900 --> 00:05:51,010
Вот система, которую мы использовали в
течение многих лет.

101
00:05:51,010 --> 00:05:54,520
И оказывается, что эти столбцы - всего
лишь степени десятки.

102
00:05:54,520 --> 00:05:59,880
Таким образом, 10 в нулевой степени - 1, 10
в первой - 10, а 10 во второй - 100.

103
00:05:59,880 --> 00:06:02,280
Вот так мы получили десятки и сотни.

104
00:06:02,280 --> 00:06:05,730
Однако в компьютерном мире у вас нет 10 цифр, от
0 до 9.

105
00:06:05,730 --> 00:06:08,130
У вас есть только две цифры, 0 и 1.

106
00:06:08,130 --> 00:06:11,290
Однако, мы можем просто немного изменить модель,

107
00:06:11,290 --> 00:06:15,850
так сказать, и теперь использовать степени 2, а
не 10.

108
00:06:15,850 --> 00:06:18,150
Так что это означает, что правый столбец будет 1,

109
00:06:18,150 --> 00:06:21,060
средний столбец будет равен 2, левый столбец
будет равен 4,

110
00:06:21,060 --> 00:06:27,330
и если бы мы продолжили, это было бы 8, 16,
32 вместо 1 000, 10 000, 100 000.

111
00:06:27,330 --> 00:06:29,320
Но идея точно такая же.

112
00:06:29,320 --> 00:06:32,820
Итак, компьютеры используют только нули и единицы

113
00:06:32,820 --> 00:06:37,210
Как же они представляют числа большие, чем 0 и 1?

114
00:06:37,210 --> 00:06:39,130
Ну, это представляет 0.

116
00: 06: 39,130 ​​-> 00: 06: 40,350
Это представляет 1.

115
00:06:40,350 --> 00:06:43,140
Какая последовательность символов
представляет число

116
00:06:43,140 --> 00:06:45,860
которое мы, люди, знаем как 2?

117
00:06:45,860 --> 00:06:46,360
Да.

118
00:06:46,360 --> 00:06:47,760
Итак, 010.

119
00:06:47,760 --> 00:06:49,490
Вы только что говорили на двоичном коде!

120
00:06:49,490 --> 00:06:53,360
Компьютеры говорят на двоичном коде,

121
00:06:53,360 --> 00:06:56,540
это просто означает, что компьютер,
чтобы представить число, которое мы знаем как 2,

122
00:06:56,540 --> 00:06:59,720
где-то хранит шаблон символов 010.

123
00:06:59,720 --> 00:07:01,910
Как они представляют 3?

124
00:07:01,910 --> 00:07:03,920
011 по той же причине.

125
00:07:03,920 --> 00:07:07,310
Это 1 раз 2, плюс 1 раз 1, дает нам, конечно, три.

126
00:07:07,310 --> 00:07:11,960
И теперь, как и раньше, когда мы говорили
про переход от 9 к 10, теперь мы идем от 3 до 4

127
00:07:11,960 --> 00:07:13,820
перенося единицу.

128
00:07:13,820 --> 00:07:21,020
Таким образом, в двоичном коде, bi означает
два, то есть 0 и 1, 100 не является 100, по сути,

129
00:07:21,020 --> 00:07:23,210
это буквально число, которое мы знаем как 4.

130
00:07:23,210 --> 00:07:24,530
И мы можем продолжать идти дальше.

131
00:07:24,530 --> 00:07:26,330
Это, конечно, сейчас 5.

132
00:07:26,330 --> 00:07:27,380
Это 6.

133
00:07:27,380 --> 00:07:28,430
Это 7.

134
00:07:28,430 --> 00:07:31,760
А что будет, если мы хотим представить восемь?

135
00:07:31,760 --> 00:07:32,260
Да.

136
00:07:32,260 --> 00:07:33,820
Мы должны как-то решить это.

137
00:07:33,820 --> 00:07:34,762
Нужна еще одна цифра.

138
00:07:34,762 --> 00:07:35,720
И это нормально, да?

139
00:07:35,720 --> 00:07:39,940
Ну уроке математики вы просто добавили бы
другой столбец

140
00:07:39,940 --> 00:07:42,800
чтобы получить значение, которое вы хотите.

141
00:07:42,800 --> 00:07:47,170
Таким образом, нам нужно больше нулей или
единиц, так же известных как бит.

142
00:07:47,170 --> 00:07:50,410
Если вы когда-либо слышали о бите, это
просто означает двоичную цифру,

143
00:07:50,410 --> 00:07:53,410
0 или 1 - это то, что мы знаем как бит.

144
00:07:53,410 --> 00:07:55,480
Но почему это так для компьютеров?

145
00:07:55,480 --> 00:07:58,460
возьмем наши ноутбуки, компьютеры и телефоны,

146
00:07:58,460 --> 00:08:00,460
подумайте, что в конце дня

147
00:08:00,460 --> 00:08:04,090
что вы должны сделать с ноутбуком,

148
00:08:04,090 --> 00:08:07,730
или мобильным телефоном?

149
00:08:07,730 --> 00:08:09,530
Что вы делаете в конце дня?

150
00:08:09,530 --> 00:08:10,880
Вы заряжаете их, верно?

151
00:08:10,880 --> 00:08:12,680
Вы подключаете их к какому-то
физическому источнику.

152
00:08:12,680 --> 00:08:16,967
Это единственный физический источник
в компьютерах, который мы используем сегодня.

153
00:08:16,967 --> 00:08:18,800
Конечно же,

154
00:08:18,800 --> 00:08:21,680
он может быть либо подключен, либо не подключен.

155
00:08:21,680 --> 00:08:27,260
Или, может быть, мы могли бы назвать это 1 или
0, истина или ложь, включено или выключено,

156
00:08:27,260 --> 00:08:30,080
то есть электричество является нашим
единственным входом

157
00:08:30,080 --> 00:08:32,929
и электричество или есть, или нет,

158
00:08:32,929 --> 00:08:36,200
ну, это на самом деле очень хорошо
соответствует идее двоичного кода

159
00:08:36,200 --> 00:08:41,270
потому что нам нужно всего два символа, 0 и
1, выключить и включить, чтобы представить
эту идею.

160
00:08:41,270 --> 00:08:43,880
Конечно, с одним битом, вы можете не так уж много.

161
00:08:43,880 --> 00:08:46,760
Вы можете только считать от 0 до 1, и все.

162
00:08:46,760 --> 00:08:50,900
Таким образом, компьютеры обычно
используют большее количество битов
для представления информации.

163
00:08:50,900 --> 00:08:53,010
И они делают это в конечном итоге физически.

164
00:08:53,010 --> 00:08:55,830
Вот и получается, что с розеткой в стене,

165
00:08:55,830 --> 00:09:00,380
или даже лампочкой или её выключателем, вы
можете обозначить 0 или 1.

166
00:09:00,380 --> 00:09:02,870
Но если вы хотите представлять больше нулей
и единиц,

167
00:09:02,870 --> 00:09:05,760
ну, нам просто нужно, может быть, 8 бит за раз.

168
00:09:05,760 --> 00:09:10,400
И если вы когда-либо слышали о байте, байт
это просто термин

169
00:09:10,400 --> 00:09:15,950
описание восьми битов, восьми нулей и
единиц, более полезная мера.

170
00:09:15,950 --> 00:09:19,100
Итак, учитывая это, я думаю, что пришло
время, возможно,

171
00:09:19,100 --> 00:09:22,310
чтобы увидеть, можем ли мы решить проблему сами.

172
00:09:22,310 --> 00:09:25,440
Возможно, мы могли бы пригласить, скажем,
двух добровольцев?

173
00:09:25,440 --> 00:09:25,940
ХОРОШО.

174
00:09:25,940 --> 00:09:28,640
Видел одну руку здесь, а другую здесь.

175
00:09:28,640 --> 00:09:32,760
Поднимайтесь, если хотите присоединиться ко мне.

176
00:09:32,760 --> 00:09:33,570
Давайте сюда.

177
00:09:36,620 --> 00:09:37,290
Тут.

178
00:09:37,290 --> 00:09:37,795
Как вас зовут?

179
00:09:37,795 --> 00:09:38,440
ПРИЯНКА: Приянка.

180
00:09:38,440 --> 00:09:39,720
ДЭВИД МАЛАН: Приянка, рад знакомству.

181
00:09:39,720 --> 00:09:40,220
Дэвид.

182
00:09:40,220 --> 00:09:42,585
Пожалуйста, подождите прямо здесь.

183
00:09:42,585 --> 00:09:43,460
Как вас зовут?

184
00:09:43,460 --> 00:09:44,180
Кэлвин: Кэлвин.

185
00:09:44,180 --> 00:09:44,520
ДЭВИД МАЛАН: Кэлвин?

186
00:09:44,520 --> 00:09:45,080
Кэлвин: Да.

187
00:09:45,080 --> 00:09:45,480
ДЭВИД МАЛАН: Дэвид.

188
00:09:45,480 --> 00:09:46,188
Рад встрече.

189
00:09:46,188 --> 00:09:47,957
Идите сюда, где Приянка.

190
00:09:47,957 --> 00:09:50,540
Итак, Приянка, вы подняли руку в первую
очередь, так что вы можете выбирать.

191
00:09:50,540 --> 00:09:53,320
Вы хотите начать первой или второй в
этой маленькой задаче?

192
00:09:53,320 --> 00:09:54,400
ПРИЯНКА: Я пойду первой.

193
00:09:54,400 --> 00:09:54,670
ДЭВИД МАЛАН: ОК.

194
00:09:54,670 --> 00:09:56,045
Итак, Приянка собирается начать первой.

195
00:09:56,045 --> 00:09:57,820
Пожалуйста, встань там, Кэлвин.

196
00:09:57,820 --> 00:09:59,740
Таким образом, задача будет здесь.

197
00:09:59,740 --> 00:10:04,330
Можете начать и представить для нас в
двоичном виде, используя эти лампочки

198
00:10:04,330 --> 00:10:08,170
и переключатели, как нули и единицы, скажем,
число 50?

199
00:10:10,882 --> 00:10:14,190
Итак, мы можем включить одну
лампочку, обозначающую 32.

200
00:10:18,420 --> 00:10:21,030
Включить лампочку - восемь

201
00:10:21,030 --> 00:10:27,950
Наш общий счет сейчас 32 плюс 8, нет, плюс 16,

202
00:10:27,950 --> 00:10:33,600
Что дает нам 32 плюс 16, то есть 48.

203
00:10:33,600 --> 00:10:38,600
Теперь, пожалуйста, аплодисменты Приянке.

204
00:10:38,600 --> 00:10:40,610
Огромное спасибо.

205
00:10:40,610 --> 00:10:41,630
Минутку, пожалуйста.

206
00:10:41,630 --> 00:10:44,570
Итак, каждая из этих лампочек представляет
собой просто переключатель или бит.

207
00:10:44,570 --> 00:10:48,130
И внутри вашего компьютера, если вы
когда-либо слышали о транзисторах,

208
00:10:48,130 --> 00:10:50,690
Транзистор - это просто маленький выключатель
в наших компьютерах.

209
00:10:50,690 --> 00:10:53,210
Таким образом, у них есть миллионы или
миллиарды этих переключателей

210
00:10:53,210 --> 00:10:57,140
что они используют физически для
представления информации и хранения данных,

211
00:10:57,140 --> 00:10:58,770
так же, как Приянка сделала здесь.

212
00:10:58,770 --> 00:11:01,100
Так что, если компьютер должен сохранить число 50,

213
00:11:01,100 --> 00:11:03,770
это буквально включит три переключателя,

214
00:11:03,770 --> 00:11:05,810
немного электричества здесь, здесь,

215
00:11:05,810 --> 00:11:09,860
и здесь, чтобы представить число 50, и выключить

216
00:11:09,860 --> 00:11:11,240
все остальные выключатели.

217
00:11:11,240 --> 00:11:14,900
Остальные пять, в данном случае, если
мы используем восемь бит или один байт.

218
00:11:14,900 --> 00:11:19,790
Кэлвин, ты поднял руку вторым, и у нас впереди
еще одна задача.

219
00:11:19,790 --> 00:11:25,830
Хорошо, что они магнитные, давайте
поднимем ставки.

220
00:11:25,830 --> 00:11:27,774
Будь так добр, Кэлвин,

221
00:11:29,960 --> 00:11:33,020
- Как насчет числа 13.

222
00:11:33,020 --> 00:11:35,300
Как бы компьютер представлял число 13

223
00:11:35,300 --> 00:11:42,270
где каждая из этих лампочек от 1 до
128 представляет бит?

224
00:11:44,890 --> 00:11:52,050
У нас, конечно, здесь один, два, четыре, восемь,

225
00:11:52,050 --> 00:11:55,190
16 и т.д.

226
00:11:55,190 --> 00:12:00,858
Мы можем спросить аудиторию, должны ли
мы включить, например, эту лампочку здесь?

227
00:12:00,858 --> 00:12:01,400
АУДИТОРИЯ: Нет.

228
00:12:01,400 --> 00:12:02,067
ДЭВИД МАЛАН: Нет.

229
00:12:02,067 --> 00:12:02,570
Слишком много.

230
00:12:02,570 --> 00:12:03,170
Как насчет этого?

231
00:12:03,170 --> 00:12:04,160
Кэлвин: Нет, слишком много.

232
00:12:04,160 --> 00:12:04,180
ДЭВИД МАЛАН: ОК.

233
00:12:04,180 --> 00:12:05,055
Теперь вы.

234
00:12:05,055 --> 00:12:06,706
Спросите аудиторию.

235
00:12:06,706 --> 00:12:07,915
Кэлвин: Эту?

236
00:12:07,915 --> 00:12:08,540
АУДИТОРИЯ: Да.

244
00Кэлвин12: 08,540 -> 00: 12: 09,082
КАЛВИН: Да.

237
00:12:09,082 --> 00:12:09,950
ДЭВИД МАЛАН: ОК.

238
00:12:09,950 --> 00:12:12,855
Итак, у нас есть 1, 2, 4, 8.

239
00:12:12,855 --> 00:12:13,355
Кэлвин: 4.

240
00:12:13,355 --> 00:12:15,560
ДЭВИД МАЛАН: Это дает нам 8 плюс 4 = 12.

241
00:12:15,560 --> 00:12:20,190
Снова аплодисменты, пожалуйста.

242
00:12:20,190 --> 00:12:20,690
Спасибо.

243
00:12:20,690 --> 00:12:21,690
Вы получили более сложную задачу.

244
00:12:21,690 --> 00:12:22,730
Спасибо вам обоим.

245
00:12:22,730 --> 00:12:26,960
Итак, в конце концов, это очень большое
физическое воплощение

246
00:12:26,960 --> 00:12:30,530
идеи двоичного кода, это все, что
происходит внутри наших компьютеров

247
00:12:30,530 --> 00:12:32,900
каждый раз, когда они представляют информацию.

248
00:12:32,900 --> 00:12:36,170
Но, похоже, у нас пока есть
возможность представлять только числа.

249
00:12:36,170 --> 00:12:39,680
Так как же тогда компьютер позволяет
отправлять текстовые сообщения и
электронные письма

250
00:12:39,680 --> 00:12:41,480
и составлять документы и прочее?

251
00:12:41,480 --> 00:12:44,270
Мы все должны договориться, как мы
собираемся представлять

252
00:12:44,270 --> 00:12:48,810
символы или буквы алфавита, будь то английский
или что-то еще.

253
00:12:48,810 --> 00:12:51,590
Попробуйте догадаться, как, если компьютер
имеет только

254
00:12:51,590 --> 00:12:55,520
миллионы и миллиарды переключателей, которые
можно включать и выключать,

255
00:12:55,520 --> 00:12:58,880
представляющих числа, как мы могли бы
представить что-то

256
00:12:58,880 --> 00:13:02,600
кроме цифр, например, букву А?

257
00:13:02,600 --> 00:13:04,150
Ещё раз?

258
00:13:04,150 --> 00:13:04,840
Цифрой.

259
00:13:04,840 --> 00:13:07,360
Так что, может быть, нам просто
нужно договориться, знаете что?

260
00:13:07,360 --> 00:13:11,140
Давайте все согласимся, что буква А, в
контексте обработки текста

261
00:13:11,140 --> 00:13:14,920
программой: текстовое сообщение или
электронная почта, просто должна быть
представлена числом,

262
00:13:14,920 --> 00:13:17,240
и мы все должны договориться, что это за число.

263
00:13:17,240 --> 00:13:22,237
Так что, может быть, давайте просто скажем, что
А - 1, В - 2, С - 3 и так далее.

264
00:13:22,237 --> 00:13:24,070
И вы могли бы представить себе тогда как компьютер

265
00:13:24,070 --> 00:13:28,300
включает много маленьких транзисторов,
чтобы представить A и B и C,

266
00:13:28,300 --> 00:13:31,870
пока программное обеспечение на этом
компьютере, как мы увидим,

267
00:13:31,870 --> 00:13:34,420
знает, что это программа обработки текста, а не,

268
00:13:34,420 --> 00:13:37,720
скажем, калькулятор или что-то, что
должно использовать цифры.

269
00:13:37,720 --> 00:13:41,480
На самом деле компьютеры не используют номер 1
для А или 2

270
00:13:41,480 --> 00:13:43,390
для Б. Немного по другому.

271
00:13:43,390 --> 00:13:46,830
Десятилетия назад мир решил, что заглавная буква А

272
00:13:46,830 --> 00:13:50,050
будет представленна числом 65.

273
00:13:50,050 --> 00:13:53,710
65, то есть, если у вас есть байт информации
в компьютере,

274
00:13:53,710 --> 00:13:59,560
и это то самое число, 2, 4, 8, 16, 32, 64.

275
00:13:59,560 --> 00:14:04,360
Если компьютер будет хранить заглавную букву
А, используя восемь бит или переключатели,

276
00:14:04,360 --> 00:14:09,100
это просто включило бы эти два, 64-е и один.

277
00:14:09,100 --> 00:14:12,790
И поэтому, когда вы получили сообщение
или электронную почту

278
00:14:12,790 --> 00:14:15,010
с заглавной буквой А, вы только что получили

279
00:14:15,010 --> 00:14:18,670
последовательность нулей и единиц как-то,
по беспроводной связи или по проводам,

280
00:14:18,670 --> 00:14:20,770
представляя эту модель.

281
00:14:20,770 --> 00:14:23,860
В частности, эту последовательность здесь, если
мы рисуем не лампочки,

282
00:14:23,860 --> 00:14:25,690
а нули и единицы.

283
00:14:25,690 --> 00:14:30,670
Таким образом, оказывается, что,
безусловно, больше цифр, чем просто А, В и С.

284
00:14:30,670 --> 00:14:33,460
У нас есть весь алфавит плюс пунктуация,
благодаря системе, которая

285
00:14:33,460 --> 00:14:36,970
называется ASCII, американский стандартный код
для обмена информацией,

286
00:14:36,970 --> 00:14:40,390
это просто причудливый способ сказать, что
есть четко определенная карта, что люди

287
00:14:40,390 --> 00:14:42,850
во всем мире договорились много лет
назад, выглядит

288
00:14:42,850 --> 00:14:44,660
примерно так.

289
00:14:44,660 --> 00:14:50,770
Таким образом, A - 65, I - 73, и точка точка
точка на обоих концах.

290
00:14:50,770 --> 00:14:54,340
То есть, если вы получили сообщение от
компьютера или от

291
00:14:54,340 --> 00:15:00,340
друга, говорящее 72, 73, 33,
или последовательность битов, представляющих

292
00:15:00,340 --> 00:15:04,710
эти цифры, какое сообщение вы только что получили?

293
00:15:04,710 --> 00:15:08,790
72, 73, 33.

294
00:15:08,790 --> 00:15:09,290
Да.

295
00:15:09,290 --> 00:15:09,820
Hi! Привет!

296
00:15:09,820 --> 00:15:11,920
Таким образом, если вы отправите текст другу,

297
00:15:11,920 --> 00:15:15,460
"hi", они получили бы сообщение, которое
является последовательностью нулей

298
00:15:15,460 --> 00:15:17,818
и единиц: 72, 73, и далее.

299
00:15:17,818 --> 00:15:20,110
На самом деле не очевидно, что такое 33,

300
00:15:20,110 --> 00:15:24,250
число 33 было выделено, чтобы представить

301
00:15:24,250 --> 00:15:25,655
восклицательный знак.

302
00:15:25,655 --> 00:15:28,780
И поэтому любые другие знаки препинания,
которые вы можете увидеть на клавиатуре,

303
00:15:28,780 --> 00:15:32,380
так же есть номера, которые компьютер
будет использовать, что все мы

304
00:15:32,380 --> 00:15:35,230
согласовано несколько лет назад,
чтобы представлять эту ценность.

305
00:15:35,230 --> 00:15:37,780
Но, конечно, это сейчас очень ориентировано
на американцев.

306
00:15:37,780 --> 00:15:40,990
И действительно, в аббревиатуре ASCII
есть американский.

307
00:15:40,990 --> 00:15:44,288
Так, например, на раннем этапе он был склонен
к американскому английскому.

308
00:15:44,288 --> 00:15:46,330
Но в мире так много символов,

309
00:15:46,330 --> 00:15:50,260
конечно, таких как акцентированные символы
и символы других языков в целом.

310
00:15:50,260 --> 00:15:53,440
В эти дни есть и такие вещи,

311
00:15:53,440 --> 00:15:55,660
которые хотя и выглядят как картинки,

312
00:15:55,660 --> 00:15:58,690
но вы получаете доступ к ним через
клавиатуру, потому что на самом деле

313
00:15:58,690 --> 00:16:01,390
они просто символы в алфавите.

314
00:16:01,390 --> 00:16:05,200
Есть нули и единицы, последовательности нулей
и единиц,

315
00:16:05,200 --> 00:16:07,540
которые представляют эти символы.

316
00:16:07,540 --> 00:16:11,140
Это то, что известно как Unicode, и это
как расширенный набор ASCII.

317
00:16:11,140 --> 00:16:14,770
Потому что ASCII использовал только восемь
бит, что не очень много,

318
00:16:14,770 --> 00:16:16,000
чтобы представить все символы.

319
00:16:16,000 --> 00:16:20,050
Unicode использует 8 или 16 или 24 или даже
32 бита,

320
00:16:20,050 --> 00:16:24,400
что означает, что у нас есть намного
больше разрядов нулей и единиц

321
00:16:24,400 --> 00:16:26,930
с помощью которого можно представлять такие вещи.

322
00:16:26,930 --> 00:16:29,320
Это "лицо со слезами радости".

323
00:16:29,320 --> 00:16:34,690
На 2019 год, это самый популярный эмодзи,
по крайней мере на iOS-устройствах.

324
00:16:34,690 --> 00:16:37,390
Кто-нибудь хочет рискнуть догадаться о том, какое

325
00:16:37,390 --> 00:16:41,560
десятичное число означает лицо со слезами радости?

326
00:16:45,010 --> 00:16:46,000
Не 65

327
00:16:46,000 --> 00:16:46,660
Не 72

328
00:16:46,660 --> 00:16:49,600
Не 73

329
00:16:49,600 --> 00:16:50,350
800.

330
00:16:50,350 --> 00:16:52,340
Больше.

331
00:16:52,340 --> 00:16:53,620
10000.

332
00:16:53,620 --> 00:16:54,920
Больше.

333
00:16:54,920 --> 00:16:57,580
Это 128,514.

334
00:16:57,580 --> 00:17:00,775
Вот сколько смайликов ждут нас в будущем

335
00:17:00,775 --> 00:17:02,650
потому что цифры сейчас становятся
такими большими.

336
00:17:02,650 --> 00:17:05,290
Или эквивалентно этой последовательности из
нулей и единиц.

337
00:17:05,290 --> 00:17:08,560
Так что, отправляя кому-нибудь эту эмодзи,

338
00:17:08,560 --> 00:17:11,349
когда вы посылаете это лицо со слезами радости,

339
00:17:11,349 --> 00:17:14,560
вы просто заставляете свой телефон
отправлять телефону друга

340
00:17:14,560 --> 00:17:16,470
эти нули и единицы.

341
00:17:16,470 --> 00:17:21,400
И Android, или iOS представляют его в виде
желтой картинки.

342
00:17:21,400 --> 00:17:24,490
Но эта желтая картинка, конечно, сама по
себе является изображением.

343
00:17:24,490 --> 00:17:26,230
И она состоит из множества маленьких точек.

344
00:17:26,230 --> 00:17:28,022
И вы, конечно,

345
00:17:28,022 --> 00:17:30,070
уже знакомы с использованием изображений,

346
00:17:30,070 --> 00:17:32,150
и видели маленькие точки из которых
состоит изображение.

347
00:17:32,150 --> 00:17:34,983
Особенно, если они низкого качества,
вы действительно можете увидеть эти точки.

348
00:17:34,983 --> 00:17:38,260
И на лице, похожем на эмодзи, у нас много
желтых точек.

349
00:17:38,260 --> 00:17:40,930
Как компьютер представляет каждую из этих точек?

350
00:17:40,930 --> 00:17:42,970
Ну, согласно системе под названием RGB.

351
00:17:42,970 --> 00:17:44,360
Красный, зеленый, синий.

352
00:17:44,360 --> 00:17:47,380
Итак, снова, десятилетия назад, люди
решили, знаете что?

353
00:17:47,380 --> 00:17:51,520
Чтобы представлять цвета, мы должны
использовать только нули и единицы,

354
00:17:51,520 --> 00:17:53,290
маленькие переключатели, механически.

355
00:17:53,290 --> 00:17:56,950
Но давайте просто согласимся, какие
цифры представляют какие цвета.

356
00:17:56,950 --> 00:17:59,230
Нам просто нужна другая система для этого.

357
00:17:59,230 --> 00:18:04,540
Теперь получается, что RGB по сути
составляет любой цвет радуги

358
00:18:04,540 --> 00:18:08,710
смешивая вместе немного красного,
немного зеленого, немного синего.

359
00:18:08,710 --> 00:18:11,180
И, комбинируя эти цвета один поверх другого,

360
00:18:11,180 --> 00:18:13,630
Вы можете получить любой цвет радуги,
какой захотите.

361
00:18:13,630 --> 00:18:17,990
Так сказать, чтобы сохранить любую точку
на экране, один пиксель,

362
00:18:17,990 --> 00:18:22,150
на изображении, которое вы можете сделать
как фотографию или отправить другу,

363
00:18:22,150 --> 00:18:24,160
вы на самом деле храните три значения.

364
00:18:24,160 --> 00:18:24,970
Раз два три.

365
00:18:24,970 --> 00:18:27,880
Три числа, действительно, это, конечно, в итоге,

366
00:18:27,880 --> 00:18:29,050
Нули и единицы.

367
00:18:29,050 --> 00:18:32,380
Эти три числа просто говорят компьютеру,
сколько красного, сколько зеленого,

368
00:18:32,380 --> 00:18:36,730
и сколько синего использовать, чтобы
представить какую-то точку на экране.

369
00:18:36,730 --> 00:18:41,860
Итак, предположим, что по совпадению
компьютер хранил паттерн 72,

370
00:18:41,860 --> 00:18:45,820
73, 33, хоть с нулями и единицами,
хоть лампочками,

371
00:18:45,820 --> 00:18:47,780
как это.

372
00:18:47,780 --> 00:18:52,510
Ну, в контексте Photoshop или браузера,
или фотографий Apple, и тому подобное,

373
00:18:52,510 --> 00:18:55,180
в контексте графической программы, ваш компьютер

374
00:18:55,180 --> 00:18:59,170
будет интерпретировать эту же
последовательность цифр,

375
00:18:59,170 --> 00:19:02,210
и, в свою очередь, биты, не та как "hi!",

376
00:19:02,210 --> 00:19:05,230
но как некоторое количество красного,
зеленого, синего.

377
00:19:05,230 --> 00:19:10,450
И получается, если вы объедините так
много красного, 72, так много зеленого, 73,

378
00:19:10,450 --> 00:19:15,250
и синего, 33, что вы получаете, когда
вы объединяете все три

379
00:19:15,250 --> 00:19:17,980
это оттенок желтого.

380
00:19:17,980 --> 00:19:21,130
Так что каждая точка в этом смайлике,

381
00:19:21,130 --> 00:19:24,650
каждая точка на этом изображении--

382
00:19:24,650 --> 00:19:26,950
и мы можем увидеть это, если
действительно увеличим масштаб

383
00:19:26,950 --> 00:19:28,872
хранится с использованием трех значений.

384
00:19:28,872 --> 00:19:30,580
Некоторое количество красного,
некоторое количество зеленого,

385
00:19:30,580 --> 00:19:32,470
некоторое количество синего, которое
мы складываем,

386
00:19:32,470 --> 00:19:35,770
получая желтый или черный или серый или
что-то еще,

387
00:19:35,770 --> 00:19:38,440
в зависимости от того, как вы кодируете
эти значения.

388
00:19:38,440 --> 00:19:43,150
Между тем, изображения или видео, которые
вы можете увидеть в Интернете

389
00:19:43,150 --> 00:19:45,810
в наши дни в форме мемов или чего-то еще,

390
00:19:45,810 --> 00:19:49,965
на самом деле просто изображения, но они
являются несколькими изображениями в одном файле.

391
00:19:49,965 --> 00:19:52,840
Если вы когда-нибудь видели то, что
называется анимированным GIF

392
00:19:52,840 --> 00:19:56,140
цикличным, все наши человеческие глаза видят

393
00:19:56,140 --> 00:19:59,200
одно изображение за другим за другим

394
00:19:59,200 --> 00:20:02,680
быстро, создавая иллюзию движения.

395
00:20:02,680 --> 00:20:04,180
Но этот кот на самом деле не двигается.

396
00:20:04,180 --> 00:20:07,960
Это как пять или 10 фотографий кота в
разных позициях

397
00:20:07,960 --> 00:20:09,430
просто зацикленных

398
00:20:09,430 --> 00:20:11,500
И это же верно для видео.

399
00:20:11,500 --> 00:20:15,010
Видео - это просто последовательность
изображений, которые проносятся мимо ваших
глаз так быстро,

400
00:20:15,010 --> 00:20:18,020
что мы, люди, воспринимаем это как
фактическое движение.

401
00:20:18,020 --> 00:20:21,250
И это почти все, что мы используем
для представления информации сегодня

402
00:20:21,250 --> 00:20:22,090
в наших компьютерах.

403
00:20:22,090 --> 00:20:24,280
У нас есть нули и единицы, из которых мы
получаем биты

404
00:20:24,280 --> 00:20:26,560
из которых мы затем получаем десятичные цифры,
и мы

405
00:20:26,560 --> 00:20:30,700
можем использовать эти цифры для
представления символов на экране или цветов

406
00:20:30,700 --> 00:20:33,790
на экране и, в свою очередь, теперь еще
более интерактивных.

407
00:20:33,790 --> 00:20:36,010
А как насчет музыки в компьютере?

408
00:20:36,010 --> 00:20:38,530
Другой тип информации, которую вы
можете представлять?

409
00:20:38,530 --> 00:20:40,810
Ну, если бы у нас здесь было пианино,

410
00:20:40,810 --> 00:20:45,190
мы могли бы также оцифровать ноты, которые
вы играете.

411
00:20:45,190 --> 00:20:49,420
Какую ноту вы играете, может быть, это до, ре,
ми, фа, соль, ля или си

412
00:20:50,080 --> 00:20:53,200
Может быть, как долго удерживаешь клавишу,
или если сильно нажмешь,

413
00:20:53,200 --> 00:20:54,520
может быть, как это громко.

414
00:20:54,520 --> 00:20:59,080
Таким образом, вы можете себе
представить, используя три значения:
ноту, продолжительность и силу

415
00:20:59,080 --> 00:21:02,420
представить себе фортепианную музыку.

416
00:21:05,360 --> 00:21:06,890
Например, так

417
00:21:06,890 --> 00:21:10,160
И я могу использовать другие значения, если я
хочу играть громче и дольше.

418
00:21:13,960 --> 00:21:14,788
И так далее.

419
00:21:14,788 --> 00:21:16,580
И это значит,

420
00:21:16,580 --> 00:21:19,330
независимо от того, с какой информацией
мы работаем,

421
00:21:19,330 --> 00:21:21,610
все сводится к нулям и единицам.

422
00:21:21,610 --> 00:21:23,740
Поэтому теперь, когда у нас есть
возможность представлять входные данные,

423
00:21:23,740 --> 00:21:29,200
будь то цифры, буквы, цвета или видео, мы
можем говорить о результатах.

424
00:21:29,200 --> 00:21:31,330
Итак, как мы получаем результат?

425
00:21:31,330 --> 00:21:34,600
Что находится внутри черного ящика?

426
00:21:34,600 --> 00:21:36,840
Это основа информатики,

427
00:21:36,840 --> 00:21:37,540
Алгоритм

428
00:21:37,540 --> 00:21:40,517
Кто-нибудь знает, что это такое?

429
00:21:40,517 --> 00:21:41,350
Что за алгоритм?

430
00:21:41,350 --> 00:21:43,433
Вы наверняка читали об этом в эти дни,

443
00: 21: 43,433 -> 00: 21: 47 478
особенно в контексте автономных автомобилей и
Сири и Алекса

431
00:21:47,078 --> 00:21:47,620
и так далее.

432
00:21:47,620 --> 00:21:49,670
Да?

433
00:21:49,670 --> 00:21:51,300
Установленный способ сделать что-то, да.

434
00:21:51,300 --> 00:21:53,580
В контексте решения проблем, алгоритм

435
00:21:53,580 --> 00:21:57,160
это просто пошаговые инструкции для
решения какой-то проблемы.

436
00:21:57,160 --> 00:22:00,900
Итак, каким может быть алгоритм для
проблемы, которую мы могли бы решить?

437
00:22:00,900 --> 00:22:01,875
Ну, подумаем об этом.

438
00:22:01,875 --> 00:22:03,750
Это известная проблема,

439
00:22:03,750 --> 00:22:06,480
есть много-много имен и много-много чисел,

440
00:22:06,480 --> 00:22:09,960
и эти имена отсортированы в алфавитном порядке
от А до Я

441
00:22:09,960 --> 00:22:11,110
в книге

442
00:22:11,110 --> 00:22:14,340
И хотя большинство из нас больше не использует
эту технологию,

443
00:22:14,340 --> 00:22:17,640
учтите, что это действительно так же, как
ваш телефон iPhone или Android

444
00:22:17,640 --> 00:22:20,880
или другое устройство, которое имеет все
ваши контакты

445
00:22:20,880 --> 00:22:23,010
и вы можете просматривать их от А до Я,

446
00:22:23,010 --> 00:22:26,370
или вы можете искать их, вводя буквы в
поле автозаполнения.

447
00:22:26,370 --> 00:22:29,230
Как ваш телефон решает эту проблему?

448
00:22:29,230 --> 00:22:31,905
Что ж, давайте рассмотрим простой подход.

449
00:22:31,905 --> 00:22:35,030
Я собираюсь посмотреть на первую страницу и
найти кого-то в телефонной книге.

450
00:22:35,030 --> 00:22:37,560
Предположим, этого человека зовут Майк
Смит, фамилия начинается

451
00:22:37,560 --> 00:22:39,480
с S. Позвольте мне идти вперед и
посмотреть дальше.

452
00:22:39,480 --> 00:22:40,500
Его здесь нет.

453
00:22:40,500 --> 00:22:41,940
Позвольте мне перевернуть страницу.

454
00:22:41,940 --> 00:22:43,285
Позвольте мне перевернуть страницу.

455
00:22:43,285 --> 00:22:44,160
Позвольте мне перевернуть страницу.

456
00:22:44,160 --> 00:22:45,060
Это алгоритм.

457
00:22:45,060 --> 00:22:48,840
Это пошаговый процесс решения проблемы,
поиска Майка Смита.

458
00:22:48,840 --> 00:22:52,100
Является ли этот алгоритм правильным, как
вы думаете?

459
00:22:52,100 --> 00:22:52,610
Да.

460
00:22:52,610 --> 00:22:55,730
Я имею в виду, это довольно медленно,
довольно глупо, потому что это займет

461
00:22:55,730 --> 00:22:59,120
Боже мой, целую вечность страниц, чтобы
найти Майка Смита.

462
00:22:59,120 --> 00:23:01,400
Но если он там, я найду его согласно

463
00:23:01,400 --> 00:23:03,060
этому подходу.

464
00:23:03,060 --> 00:23:05,970
Что, если я немного ускорюсь, просто потому
что это слишком долго?

465
00:23:05,970 --> 00:23:11,690
Итак, я делаю 2, 4, 6, 8, 10, 12, 14, 16 и
так далее.

466
00:23:11,690 --> 00:23:13,610
Этот алгоритм быстрее?

467
00:23:13,610 --> 00:23:14,360
Абсолютно.

468
00:23:14,360 --> 00:23:15,410
Буквально в два раза быстрее.

469
00:23:15,410 --> 00:23:16,100
Это правильно?

470
00:23:16,100 --> 00:23:17,030
АУДИТОРИЯ: Нет.

471
00:23:17,030 --> 00:23:17,697
ДЭВИД МАЛАН: Нет.

472
00:23:17,697 --> 00:23:18,610
Почему?

473
00:23:19,590 --> 00:23:21,173
ДЭВИД МАЛАН: Да, мы можем его пропустить.

474
00:23:21,173 --> 00:23:23,800
Мне может не повезти, а может я смогу добраться
до S.

475
00:23:23,800 --> 00:23:28,490
Но если Майк был между двумя страницами, когда
я переворачиваю их сразу.

476
00:23:28,490 --> 00:23:29,680
Это не фатальный недостаток.

477
00:23:29,680 --> 00:23:31,600
Я мог бы исправить этот алгоритм, просто сказав

492
00: 23: 31 600 -> 00: 23: 36 100
если вы нажмете на раздел Т или, возможно,
Sn вместо Sm, просто

478
00:23:36,100 --> 00:23:40,840
вернитесь на одну или несколько страниц,
чтобы исправить эту ошибку.

479
00:23:40,840 --> 00:23:43,130
Но это, по крайней мере, в два раза быстрее.

480
00:23:43,130 --> 00:23:45,760
Но если эта телефонная книга имеет 1000
страниц чего-то,

481
00:23:45,760 --> 00:23:51,130
мне все еще понадобится 500 парных оборотов,
чтобы найти Майка Смита.

482
00:23:51,130 --> 00:23:53,192
Это большое время, чтобы найти кого-то.

483
00:23:53,192 --> 00:23:55,150
Но большинство из нас, если вы использовали
эту технологию,

484
00:23:55,150 --> 00:23:58,370
вместо этого, что вы делали тогда?

485
00:23:58,370 --> 00:24:02,410
Примерно к середине, если на боковой стороне
нет маленьких букв

486
00:24:02,410 --> 00:24:03,125
который помогают.

487
00:24:03,125 --> 00:24:04,250
Так, примерно в середине.

488
00:24:04,250 --> 00:24:05,510
Я в разделе М

489
00:24:05,510 --> 00:24:08,720
Теперь М, конечно, означает, что Смит не тут,

490
00:24:08,720 --> 00:24:09,860
Слишком близко к А

491
00:24:09,860 --> 00:24:12,620
Он, вероятно, ближе к Z, потому что S, конечно,

492
00:24:12,620 --> 00:24:14,210
находится между М и Z.

493
00:24:14,210 --> 00:24:18,350
Таким образом, я могу буквально разорвать
проблему пополам,

494
00:24:18,350 --> 00:24:24,320
выбросить половину проблемы ,

495
00:24:24,320 --> 00:24:27,580
подчеркивая, что мы перешли с 1000
странных страниц на что?

496
00:24:27,580 --> 00:24:28,443
500.

497
00:24:28,443 --> 00:24:29,360
И я могу сделать это снова.

498
00:24:29,360 --> 00:24:30,660
Ах, я зашел слишком далеко.

499
00:24:30,660 --> 00:24:34,190
Я сейчас нахожусь в разделе T, так что я
могу разорвать проблему пополам,

500
00:24:34,190 --> 00:24:39,890
выбросить эту половину, и теперь я сократился
с 1000 до 500 до 250 страниц

501
00:24:39,890 --> 00:24:44,130
только после двух шагов в этом пошаговом процессе.

502
00:24:44,130 --> 00:24:46,820
И если я повторю это снова и снова, надеюсь,

503
00:24:46,820 --> 00:24:50,720
я окажусь, в конечном счете, с только
одной страницей, на которой

504
00:24:50,720 --> 00:24:53,070
Майк Смит либо есть, либо нет.

505
00:24:53,070 --> 00:24:55,110
И я могу позвонить ему или выйти.

506
00:24:55,110 --> 00:24:58,320
Так что этот алгоритм поможет мне быстрее
найти решение.

507
00:24:58,320 --> 00:25:01,580
И мы можем оценить это, даже если мы
просто посмотрим на некоторые цифры,

508
00:25:01,580 --> 00:25:03,810
в конечном итоге, следующим образом.

509
00:25:03,810 --> 00:25:08,180
Так что, если я начну с всего 1024 страниц
в телефонной книге,

510
00:25:08,180 --> 00:25:11,420
и я ищу Майка Смита, и я разделяю эту проблему,

511
00:25:11,420 --> 00:25:14,960
разделяю проблему пополам, пополам и пополам,
я иду к 512,

512
00:25:14,960 --> 00:25:21,710
Я иду на 256, 128, 64, 32, 16, восемь, четыре,
два и один.

513
00:25:21,710 --> 00:25:25,850
Всего за 10 шагов я нашел страницу Майка Смита.

514
00:25:25,850 --> 00:25:28,210
В отличие от этого первого алгоритма, где я просто

515
00:25:28,210 --> 00:25:30,650
открывал одну страницу за раз, сколько шагов

516
00:25:30,650 --> 00:25:33,462
мне понадобилось бы, чтобы найти Майка Смита?

517
00:25:33,462 --> 00:25:36,750
Да, примерно 700, 800, примерно там, где могли
бы быть S.

518
00:25:36,750 --> 00:25:39,990
Так что в худшем случае 1000 страниц, если
я просматриваю все это.

519
00:25:39,990 --> 00:25:43,710
Второй алгоритм, может быть, 500 страниц,
потому что я иду по два раза за раз.

520
00:25:43,710 --> 00:25:47,343
Но, боже мой, 10 шагов с этим алгоритмом здесь.

521
00:25:47,343 --> 00:25:50,010
И есть вероятность, что это алгоритм,
который большинство из нас в этой комнате

522
00:25:50,010 --> 00:25:53,640
создало бы, то есть часто решение проблем

523
00:25:53,640 --> 00:25:57,480
на самом деле, это просто использование
вашей интуиции

524
00:25:57,480 --> 00:26:01,530
и идеи, что теперь вам просто нужно
перевести данные таким образом,

525
00:26:01,530 --> 00:26:04,620
что машины и другие люди смогут понять.

526
00:26:04,620 --> 00:26:08,460
Так как же нам понять, насколько лучше
этот алгоритм?

527
00:26:08,460 --> 00:26:10,980
Хорошо, рассмотрим эту первую строку здесь.

528
00:26:10,980 --> 00:26:14,100
На этой оси у, вертикальной оси,

529
00:26:14,100 --> 00:26:16,270
это время, необходимое для решения проблемы.

530
00:26:16,270 --> 00:26:19,930
И по горизонтали, по оси X, размер проблемы.

531
00:26:19,930 --> 00:26:23,610
Таким образом, количество страниц в
телефонной книге будет увеличиваться при
переходе вправо

532
00:26:23,610 --> 00:26:28,100
и необходимое количество секунд или
поворотов страницы будет увеличиваться вдоль оси y

533
00:26:28,100 --> 00:26:28,600
Вот.

534
00:26:28,600 --> 00:26:31,230
Так что первый алгоритм, изображенный
здесь красным,

535
00:26:31,230 --> 00:26:35,700
предлагает отношение один к одному
между количеством страниц в книге

536
00:26:35,700 --> 00:26:37,800
и количество секунд, чтобы найти кого-то.

537
00:26:37,800 --> 00:26:39,210
Итак, у вас есть эта

538
00:26:39,210 --> 00:26:41,950
прямая наклонная линия.

539
00:26:41,950 --> 00:26:44,580
Итак, если мы рассмотрим второй алгоритм,

555
00: 26: 44,580 -> 00: 26: 47 470
второй алгоритм также будет прямой линией,

540
00:26:47,070 --> 00:26:49,560
но эта прямая будет ниже на графике.

541
00:26:49,560 --> 00:26:50,190
Почему?

542
00:26:50,190 --> 00:26:53,490
Потому что для такой же проблемы мне
потребуется вдвое меньше времени

543
00:26:53,490 --> 00:26:57,340
потому что, конечно, я иду по две страницы за раз.

544
00:26:57,340 --> 00:26:59,520
Так что, если мы видим это, например, если
эта пунктирная линия

545
00:26:59,520 --> 00:27:02,130
представляет некоторое количество страниц
в телефонной книге,

546
00:27:02,130 --> 00:27:05,700
может быть 1024, ну, вы можете видеть, что
это может занять много секунд

547
00:27:05,700 --> 00:27:09,690
или страница переворачивается, чтобы найти
Майка Смита с этим вторым алгоритмом.

548
00:27:09,690 --> 00:27:12,630
Но в первом алгоритме то же количество страниц

549
00:27:12,630 --> 00:27:16,230
займет гораздо больше времени, буквально вдвое

550
00:27:16,230 --> 00:27:17,690
столько времени в этом случае.

551
00:27:17,690 --> 00:27:19,230
Как насчет третьего алгоритма?

552
00:27:19,230 --> 00:27:22,170
Ну, даже если вы не помните точно, что
такое логарифм,

553
00:27:22,170 --> 00:27:24,880
видна принципиально другая форма.

554
00:27:24,880 --> 00:27:27,810
Зеленая линия описывает этот третий и
последний алгоритм

555
00:27:27,810 --> 00:27:31,980
посредством чего вы разделили проблему

556
00:27:31,980 --> 00:27:35,040
на 50% снова и снова и снова.

557
00:27:35,040 --> 00:27:37,290
Снова, и снова, и снова.

558
00:27:37,290 --> 00:27:41,130
И обратите внимание, что, когда число страниц
в телефонной книге становится
действительно большим,

559
00:27:41,130 --> 00:27:47,240
Вы едва влияете на то, сколько времени
требуется для решения этой проблемы.

560
00:27:47,040 --> 00:27:50,610
Например, если Кембридж и Олстон, два
города здесь, в штате Массачусетс,

561
00:27:50,610 --> 00:27:52,650
Объединятся в следующем году, и их
телефонные книги станут

562
00:27:52,650 --> 00:27:56,130
одной телефонной книгой, в два раза больше,
не 1000 страниц каждая,

563
00:27:56,130 --> 00:27:58,950
но всего 2000 страниц, сколько еще шагов

564
00:27:58,950 --> 00:28:01,650
возможно, нам понадобится, чтобы найти Майка
Смита в книге следующего года

565
00:28:01,650 --> 00:28:04,950
если у неё есть 2000 страниц вместо 1000?

566
00:28:04,950 --> 00:28:06,360
Еще один шаг.

567
00:28:06,360 --> 00:28:09,480
Но первые два алгоритма, это еще 1000 шагов,
может быть,

568
00:28:09,480 --> 00:28:10,770
или еще 500.

569
00:28:10,770 --> 00:28:15,780
Это принципиально большие различия
в эффективности.

570
00:28:15,780 --> 00:28:18,450
Итак, давайте переведем эту идею, эту интуицию,

571
00:28:18,450 --> 00:28:20,233
в первый пример программного кода.

572
00:28:20,233 --> 00:28:21,150
В псевдокод.

573
00:28:21,150 --> 00:28:23,025
Нет единого формального определения псевдокода.

574
00:28:23,025 --> 00:28:25,350
Псевдокод - это просто кодоподобный
синтаксис, который вы пишете

575
00:28:25,350 --> 00:28:28,920
на английском или вашем родном языке,
который представляет ваши идеи,

576
00:28:28,920 --> 00:28:30,390
но в сжатой, алгоритмической форме.

577
00:28:30,390 --> 00:28:33,450
Этот алгоритм для поиска Майка Смита

578
00:28:33,450 --> 00:28:37,240
может быть написан в псевдокоде следующим образом.

579
00:28:37,240 --> 00:28:40,470
Шаг первый, возьмите телефонную книгу, и это
было первое, что я сделал.

580
00:28:40,470 --> 00:28:43,980
Шаг второй, откройте середину телефонной
книги, что я и сделал.

581
00:28:43,980 --> 00:28:47,430
Шаг третий, посмотрите на страницу

582
00:28:47,430 --> 00:28:50,250
и если Смит на этой странице, что я хочу сделать?

583
00:28:50,250 --> 00:28:52,500
Теперь мой код будет выглядеть немного иначе,

584
00:28:52,500 --> 00:28:55,290
и я сделаю отступ, чтобы прояснить, что здесь есть

585
00:28:55,290 --> 00:28:57,330
какая-то зависимость.

586
00:28:57,330 --> 00:29:02,640
Я пойду дальше и сделаю шаг пять и позвоню
Майку, только если четвертая строка верна,

587
00:29:02,640 --> 00:29:04,010
он на странице.

588
00:29:04,010 --> 00:29:08,010
Иначе, если Смит раньше в книге, так
сказать, слева,

589
00:29:08,010 --> 00:29:11,800
Я открою середину левой половины книги,

590
00:29:11,800 --> 00:29:14,037
Что я, вероятно, захочу делать дальше?

591
00:29:14,037 --> 00:29:15,273
АУДИТОРИЯ:

592
00:29:15,273 --> 00:29:16,940
ДЭВИД МАЛАН: Да, именно это

593
00:29:16,940 --> 00:29:18,580
Как мне сделать это снова и снова?

594
00:29:18,580 --> 00:29:22,780
У меня уже есть код, в третьей строке, который
это делает.

595
00:29:22,780 --> 00:29:26,110
Посмотреть на страницу и принять решение,
пойти налево или направо.

596
00:29:26,110 --> 00:29:29,190
Так что я просто скажу вернуться к третьей строке

597
00:29:29,190 --> 00:29:30,940
до середины левой половины книги

598
00:29:30,940 --> 00:29:33,552
если Смит действительно раньше в книге.

599
00:29:33,552 --> 00:29:35,510
Другой сценарий, конечно, противоположен.

600
00:29:35,510 --> 00:29:38,470
Так что, если Смит позже в книге, давайте
откроем в середине

601
00:29:38,470 --> 00:29:42,280
правой части книги, а затем давайте перейдем
к третьей строке.

602
00:29:42,280 --> 00:29:45,820
Иначе, есть четвертый возможный сценарий.

603
00:29:45,820 --> 00:29:49,395
Что еще может произойти в этом алгоритме?

604
00:29:49,395 --> 00:29:50,270
АУДИТОРИЯ:

605
00:29:50,270 --> 00:29:51,380
ДЭВИД МАЛАН: Его там нет.

606
00:29:51,380 --> 00:29:53,510
И поэтому я, вероятно, хочу учесть это и

607
00:29:53,510 --> 00:29:58,253
просто выйти, если он действительно не
на странице, слева,

608
00:29:58,253 --> 00:29:59,420
или справа.

609
00:29:59,420 --> 00:30:03,410
Таким образом, это можно выразить в псевдокоде,

610
00:30:03,410 --> 00:30:05,210
просто как в английском языке.

611
00:30:05,210 --> 00:30:08,260
В этом синтаксисе есть некоторые общие черты,

612
00:30:08,260 --> 00:30:10,760
некоторые особенности, которые мы
собираемся использовать в течение
следующих нескольких недель

613
00:30:10,760 --> 00:30:13,880
не только в псевдокоде, но и на языке,
называемом Скрэтч,

614
00:30:13,880 --> 00:30:16,790
языке Cи, языке Python и других.

615
00:30:16,790 --> 00:30:20,233
Есть определенные конструкции в программировании,

616
00:30:20,233 --> 00:30:23,150
которые используются среди всех языков

617
00:30:23,150 --> 00:30:26,060
Здесь выделено желтым цветом то, что
отныне, сегодня и далее,

618
00:30:26,060 --> 00:30:27,560
мы просто будем вызывать функции.

619
00:30:27,560 --> 00:30:30,860
Это глаголы или действия, которые просто
говорят компьютеру,

620
00:30:30,860 --> 00:30:33,260
или в этом случае человеку, что делать.

621
00:30:33,260 --> 00:30:34,520
Это функции.

622
00:30:34,520 --> 00:30:37,640
Теперь выделено желтым цветом то, что мы
будем называть условиями.

623
00:30:37,640 --> 00:30:41,180
Это ветвления, развилки, можно сделать это

624
00:30:41,180 --> 00:30:43,760
или вот то или, может быть, другое.

625
00:30:43,760 --> 00:30:47,000
Но чтобы принять решение, надо задать вопрос.

626
00:30:47,000 --> 00:30:49,040
И эти вопросы в информатике, условия,

627
00:30:49,040 --> 00:30:52,610
называются логическими или булевыми выражениями,
в честь математика Boole.

628
00:30:52,610 --> 00:30:55,190
И логические выражения, выделенные теперь
желтым цветом,

629
00:30:55,190 --> 00:31:00,410
это просто вопросы, на которые есть ответы да
или нет, правда или ложь

630
00:31:00,410 --> 00:31:04,700
или, черт возьми, один или ноль ответы.

631
00:31:04,700 --> 00:31:08,887
Так что даже в коде мы видим подсказку,
почему единицы и нули нужны.

632
00:31:08,887 --> 00:31:10,220
Наконец, здесь есть это.

633
00:31:10,220 --> 00:31:11,513
Вернитесь к третьей строке.

634
00:31:11,513 --> 00:31:12,680
Мы использовали это в двух местах.

635
00:31:12,680 --> 00:31:14,870
Это мы будем называть циклами.

636
00:31:14,870 --> 00:31:18,320
Цикл, который делает что-то снова и снова.

637
00:31:18,320 --> 00:31:21,470
Итак, помимо этих четырех идей: функций,
условий, булевых выражений,

638
00:31:21,470 --> 00:31:24,860
и циклов, мы также увидим другие.

639
00:31:24,860 --> 00:31:27,800
Переменные, напоминающие об алгебре,

640
00:31:27,800 --> 00:31:30,350
но более важные в контексте программирования.

641
00:31:30,350 --> 00:31:31,850
То, что называется потоками и событиями.

642
00:31:31,850 --> 00:31:35,397
Мы сделаем это с настоящим
языком программирования.

643
00:31:35,397 --> 00:31:36,980
На следующей неделе

644
00:31:36,980 --> 00:31:41,660
Действительно, через неделю вы поймете, как
это работает.

645
00:31:41,660 --> 00:31:46,640
Пока что, 2/3 из вас могут не понимать, и
это нормально.

646
00:31:46,640 --> 00:31:49,430
Это программа на языке под названием Cи

647
00:31:49,430 --> 00:31:50,900
подробнее об этом в следующий раз

648
00:31:50,900 --> 00:31:53,580
Она просто печатает "Hello, world!"

649
00:31:53,580 --> 00:31:56,750
Сегодня мы сделаем это с помощью
графического языка

650
00:31:56,750 --> 00:31:58,790
Scratch от Массачусетского
технологического института.

651
00:31:58,790 --> 00:32:02,090
Это язык, на котором вы можете
программировать, перетаскивая

652
00:32:02,090 --> 00:32:05,660
и отпуская блоки, кусочки паззла,
которые сцепляются

653
00:32:05,660 --> 00:32:09,440
вместе, чтобы вы могли сказать компьютеру,
что делать,

654
00:32:09,440 --> 00:32:10,460
шаг за шагом.

655
00:32:10,460 --> 00:32:13,610
И мы увидим сегодня, для первой
поставленной задачи,

656
00:32:13,610 --> 00:32:16,880
что вы можете выразить все эти идеи

673
00: 32: 16 880 -> 00: 32: 20 600
из псевдокода на настоящем языке, как скрэтч.

674
00: 32: 20 600 -> 00: 32: 21 800
Итак, что впереди?

657
00:32:21,800 --> 00:32:26,120
Откроем scratch.mit.edu,

658
00:32:26,120 --> 00:32:28,940
здесь вы выполните первый набор задач.

659
00:32:28,940 --> 00:32:31,610
И это будет выглядеть примерно так, когда
вы откроете его.

660
00:32:31,610 --> 00:32:35,125
В левой части этого сайта, эта
среда программирования на основе веб

661
00:32:35,125 --> 00:32:37,250
из MIT, вы увидите на левой стороне

662
00:32:37,250 --> 00:32:39,170
целая куча кусочков головоломки, так сказать.

663
00:32:39,170 --> 00:32:42,140
И они классифицированы в соответствии с
некоторыми различными цветами там

664
00:32:42,140 --> 00:32:43,010
слева.

665
00:32:43,010 --> 00:32:46,130
Посередине будет большой белый холст, сначала

666
00:32:46,130 --> 00:32:48,620
на который вы можете перетащить эти
кусочки головоломки

667
00:32:48,620 --> 00:32:52,370
и соединить их вместе, чтобы программа
что-то сделала.

668
00:32:52,370 --> 00:32:53,630
Что она может сделать?

669
00:32:53,630 --> 00:32:56,390
Ну, в правом верхнем углу здесь находится
так называемая сцена.

670
00:32:56,390 --> 00:33:00,140
По умолчанию на этом этапе есть только
один элемент или спрайт.

671
00:33:00,140 --> 00:33:02,810
Он может двигаться вверх, вниз, влево, вправо

672
00:33:02,810 --> 00:33:05,630
и делать другие вещи, если вы скажете

673
00:33:05,630 --> 00:33:08,875
ему, что делать, перетаскивая эти
кусочки головоломки.

674
00:33:08,875 --> 00:33:11,000
Если вам не нравится этот кот или вы
хотите другого,

675
00:33:11,000 --> 00:33:13,790
Вы также можете добавить несколько спрайтов,

676
00:33:13,790 --> 00:33:16,380
выбирая их в этой области.

677
00:33:16,380 --> 00:33:19,880
Итак, давайте сделаем это сейчас

678
00:33:19,880 --> 00:33:24,950
начнём программировать, используя эту среду.

679
00:33:24,950 --> 00:33:27,890
Я открою браузер.

680
00:33:27,890 --> 00:33:34,620
И через мгновение вы увидите на
экране scratch.mit.edu.

681
00:33:34,620 --> 00:33:37,400
Я продолжу и открою, нажав тут,

682
00:33:37,400 --> 00:33:41,820
мы увидим этот редактор с учебником, который я

683
00:33:41,820 --> 00:33:43,070
пока что закрою.

684
00:33:43,070 --> 00:33:45,030
Но теперь мы видим ту же самую среду.

685
00:33:45,030 --> 00:33:47,720
И вы увидите здесь вверху справа,

686
00:33:47,720 --> 00:33:49,940
есть этот зеленый флаг и этот знак остановки.

687
00:33:49,940 --> 00:33:53,600
Зеленый флаг - это то, что вы можете нажать,
чтобы запустить программу.

688
00:33:53,600 --> 00:33:56,060
Знак остановки остановит программу.

689
00:33:56,060 --> 00:33:59,330
Среди всех этих категорий здесь,

690
00:33:59,330 --> 00:34:02,510
есть, например, оранжевые, называемые Control.

691
00:34:02,510 --> 00:34:04,730
Есть несколько желтых, которые называются События.

692
00:34:04,730 --> 00:34:06,800
И мы сосредоточимся на этом в первую очередь.

693
00:34:06,800 --> 00:34:10,190
Если я отведу этот кусок головоломки сюда,

694
00:34:10,190 --> 00:34:11,989
Вот как я могу начать программирование в Scratch.

695
00:34:11,989 --> 00:34:14,270
Когда будет нажат зеленый флаг,
сделайте следующее.

696
00:34:14,270 --> 00:34:15,239
Что я хочу сделать?

697
00:34:15,239 --> 00:34:17,031
Ну, давайте этот котик скажет привет.

698
00:34:17,031 --> 00:34:18,739
Я использовал эту среду ранее,

699
00:34:18,739 --> 00:34:23,090
я знаю, что под Looks я могу найти
"сказать", например: поздороваться.

700
00:34:23,090 --> 00:34:27,230
И обратите внимание, что форма
соответствует оранжевой части головоломки

701
00:34:27,230 --> 00:34:30,710
и желтый кусочек головоломки хочет соединиться,

702
00:34:30,710 --> 00:34:31,858
и если я отпущу, это и случится.

703
00:34:31,858 --> 00:34:34,400
И я скажу, пожалуй, одну из самых каноничных вещей

704
00:34:34,400 --> 00:34:37,310
сказать в вашей самой первой программе

705
00:34:37,310 --> 00:34:39,685
"Привет, мир"

706
00:34:39,685 --> 00:34:41,810
Я продолжу и нажму на зеленый флаг.

707
00:34:41,810 --> 00:34:45,260
И вуаля, наша самая первая программа.

708
00:34:45,260 --> 00:34:46,040
Тот же эффект.

709
00:34:46,040 --> 00:34:46,580

728
00: 34: 46 580 -> 00: 34: 47 480
Спасибо.

729
00: 34: 47 080 -> 00: 34: 50 060

710
00:34:50,060 --> 00:34:51,380
Спасибо.

711
00:34:51,380 --> 00:34:54,469
Пока очень простая, но мы исправим это.

712
00:34:54,469 --> 00:34:58,580
Этот кот сейчас говорит только привет.

713
00:34:58,580 --> 00:35:02,150
Что если бы мы хотели, чтобы он сказал привет мне

714
00:35:02,150 --> 00:35:03,143
или тебе?

715
00:35:03,143 --> 00:35:05,810
Мы можем сделать это.

716
00:35:05,810 --> 00:35:08,880
Я выброшу это, просто перетаскивая

717
00:35:08,880 --> 00:35:09,380
налево.

718
00:35:09,380 --> 00:35:11,147
И кусок головоломки просто исчезает.

719
00:35:11,147 --> 00:35:13,730
И если поискать под голубым блоком,

720
00:35:13,730 --> 00:35:16,490
например, Sensing, есть много кусочков

721
00:35:16,490 --> 00:35:18,500
связанные с окружающей средой.

722
00:35:18,500 --> 00:35:21,770
И один из них здесь, спросить "как вас зовут?"

723
00:35:21,770 --> 00:35:22,400
И ждать.

724
00:35:22,400 --> 00:35:24,785
Но ваше имя - выражение в белой коробке -

725
00:35:24,785 --> 00:35:25,910
я могу изменить

726
00:35:25,910 --> 00:35:29,990
Таким образом, вы можете задавать любые
вопросы, но я продолжу и буду использовать
это значение по умолчанию.

727
00:35:29,990 --> 00:35:32,722
И теперь обратите внимание, здесь синим
цветом есть Ответ,

728
00:35:32,722 --> 00:35:35,180
который является круглой формой,
которая представляет собой то,

729
00:35:35,180 --> 00:35:36,830
что мы называем переменной.

730
00:35:36,830 --> 00:35:40,370
Эта переменная будет хранить ответ, когда

731
00:35:40,370 --> 00:35:41,930
мы спрашиваем имя.

732
00:35:41,930 --> 00:35:44,840
Итак, что я хочу сделать, когда получаю
имя человека?

733
00:35:44,840 --> 00:35:46,640
Хорошо, я вернуться к Looks.

734
00:35:46,640 --> 00:35:48,980
Скажу привет

735
00:35:48,980 --> 00:35:53,480
Итак, скажу привет, а потом еще раз, скажу
привет снова,

736
00:35:53,480 --> 00:35:56,360
но вместо этого я хочу использовать имя.

737
00:35:56,360 --> 00:36:00,710
Было бы неправильно просто вводить мое имя,
потому что тогда имя всегда

738
00:36:00,710 --> 00:36:04,260
будет Дэвид, независимо от того, кто
запускает программу.

739
00:36:04,260 --> 00:36:05,390
Поэтому я не хочу этого делать.

740
00:36:05,390 --> 00:36:08,680
Если я зайду в Sensing, а затем перетащу
этот кусок головоломки,

741
00:36:08,680 --> 00:36:09,500
обратите внимание

742
00:36:09,500 --> 00:36:11,240
Он хочет защелкнутся.

743
00:36:11,240 --> 00:36:12,770
И блок будет расти, чтобы соответствовать ответу.

744
00:36:12,770 --> 00:36:16,170
Так что теперь я могу сказать привет, а затем
я могу сказать имя.

745
00:36:16,170 --> 00:36:18,830
Итак, я нажму «Стоп» и начну снова.

746
00:36:18,830 --> 00:36:19,657
Как вас зовут?

747
00:36:19,657 --> 00:36:20,990
Дэвид.

748
00:36:20,990 --> 00:36:21,710
Ввод.

749
00:36:21,710 --> 00:36:24,580
Дэвид.

770
00: 36: 24 580 -> 00: 36: 27 610
Да, похоже, мы забыли привет.

750
00:36:27,610 --> 00:36:30,040
Это мой первый баг.

751
00:36:30,040 --> 00:36:31,390
Есть мысли, почему?

752
00:36:31,390 --> 00:36:32,610
Что я сделал не так?

753
00:36:32,610 --> 00:36:33,826
Да?

754
00:36:33,826 --> 00:36:37,850
АУДИТОРИЯ:

755
00:36:37,850 --> 00:36:38,600
ДЭВИД МАЛАН: Да.

756
00:36:38,600 --> 00:36:42,440
Я сказал компьютеру с помощью этого
алгоритма сделать три вещи,

757
00:36:42,440 --> 00:36:44,600
спроси, как зовут и жди, но позже

758
00:36:44,600 --> 00:36:47,887
скажи привет, скажи ответ в такой
быстрой последовательности.

759
00:36:47,887 --> 00:36:49,970
И Боже мой, наши компьютеры и телефоны в эти дни

760
00:36:49,970 --> 00:36:53,090
так быстры, они делают так много вещей так
быстро, что

761
00:36:53,090 --> 00:36:55,430
он поздоровался, просто никто из нас этого
не видел

762
00:36:55,430 --> 00:36:57,470
потому что мое имя сразу заменило его.

763
00:36:57,470 --> 00:36:59,330
Я могу исправить это несколькими способами.

764
00:36:59,330 --> 00:37:01,670
Продолжим и вернемся на Looks на мгновение,

765
00:37:01,670 --> 00:37:05,300
избавимся от этой части головоломки, и,
например, поздороваемся в течение двух секунд.

766
00:37:05,300 --> 00:37:09,050
Затем покажем имя в течение двух секунд.

767
00:37:09,050 --> 00:37:11,810
перетаскивая ответ сюда.

768
00:37:11,810 --> 00:37:14,270
Так что это была моя первая ошибка в коде,
первый баг!

769
00:37:14,270 --> 00:37:19,520
Я продолжу, наберу «Дэвид», и теперь
"привет, Дэвид".

770
00:37:19,520 --> 00:37:20,150
Отлично.

771
00:37:20,150 --> 00:37:20,910
Так лучше.

772
00:37:20,910 --> 00:37:23,210
Это немного странно, потому что вы обычно

773
00:37:23,210 --> 00:37:27,350
не приветствуете кого-нибудь,
поздоровавшись, через две секунды.

774
00:37:27,350 --> 00:37:29,720
Так что, если мы как-то объединим эти выражения

775
00:37:29,720 --> 00:37:32,450
скажем, привет запятая Дэвид?

776
00:37:32,450 --> 00:37:34,350
Ну, мы можем это сделать.

777
00:37:34,350 --> 00:37:38,600
Вернусь сюда и возьму один из блоков

799
00: 37: 38 600 -> 00: 37: 39 912
скажем, вот так.

778
00:37:39,912 --> 00:37:42,620
Я не буду беспокоиться о секундах

779
00:37:42,620 --> 00:37:44,570
потому что сейчас я скажу фразу целиком.

780
00:37:44,570 --> 00:37:49,087
Я хочу сказать привет, запятая, пробел, а
затем имя пользователя.

781
00:37:49,087 --> 00:37:51,170
Надо поискать дальше,

782
00:37:51,170 --> 00:37:53,390
и тут найдется нужное

783
00:37:53,390 --> 00:37:55,730
кусочек пазла, который называется Join.

784
00:37:55,730 --> 00:37:58,940
И немного странно, что слова по умолчанию -
яблоко и банан,

785
00:37:58,940 --> 00:38:00,590
но это неважно.

786
00:38:00,590 --> 00:38:04,090
Если я продолжу перетаскивать это сюда,
оно заполнится

787
00:38:04,090 --> 00:38:06,140
и это заменит то, что было раньше.

788
00:38:06,140 --> 00:38:10,040
Я могу сказать привет, запятая, пробел, а
затем вместо привет банан,

789
00:38:10,040 --> 00:38:13,640
Вернусь к Sensing, перетащу ответ пользователя,

790
00:38:13,640 --> 00:38:16,820
и теперь мы говорим привет, запятая, ответ.
+813
00: 38: 16 820 -> 00: 38: 18 410
Итак, давайте попробуем теперь.

791
00:38:18,410 --> 00:38:21,380
Зеленый флаг, имя, ввод.

792
00:38:21,380 --> 00:38:23,090
Привет запятая Дэвид.

793
00:38:23,090 --> 00:38:25,760
Так что теперь программа немного сложнее,

794
00:38:25,760 --> 00:38:28,940
но обратите внимание, что мы начинаем
вкладывать эти глаголы, эти функции.

795
00:38:28,940 --> 00:38:31,700
Мы просим имя, а затем мы говорим результат

796
00:38:31,700 --> 00:38:34,050
объединяя их вместе

797
00:38:34,050 --> 00:38:36,410
Так что есть несколько идей, которые
нужно отслеживать одновременно.

798
00:38:36,410 --> 00:38:40,340
Но это на самом деле очень похоже на то, что
мы делали с самого начала

799
00:38:40,340 --> 00:38:41,270
следующим образом.

800
00:38:41,270 --> 00:38:44,420
Например, если мы хотим просто поздороваться

801
00:38:44,420 --> 00:38:48,590
это соответствует нашему
фундаментальному определению

802
00:38:48,590 --> 00:38:50,060
о решении проблем.

803
00:38:50,060 --> 00:38:53,720
Входные данные - это, конечно же, просто
привет мир.

804
00:38:53,720 --> 00:38:58,190
алгоритм, который вы хотите выполнить -
пошаговые инструкции

805
00:38:58,190 --> 00:39:02,600
для того, чтобы что-то сказать, Скретч
использует фиолетовый Say, и полученный результат

806
00:39:02,600 --> 00:39:05,060
Это, конечно, приветствие Скретча

807
00:39:05,060 --> 00:39:07,337
Теперь рассмотрим более сложный пример.

808
00:39:07,337 --> 00:39:08,420
Мы спросили, как тебя зовут?

809
00:39:08,420 --> 00:39:09,500
И ждали.

810
00:39:09,500 --> 00:39:12,050
Ну, это будет выглядеть так.

811
00:39:12,050 --> 00:39:15,290
Ответ на этот вопрос, конечно, как тебя зовут?

812
00:39:15,290 --> 00:39:17,480
Алгоритм, или в этом случае, функция,

813
00:39:17,480 --> 00:39:22,250
с помощью которого мы решаем эту проблему
- спросить и ждать, принимая эти данные.

814
00:39:22,250 --> 00:39:25,070
И результат, который мы получаем,
является ответом.

815
00:39:25,070 --> 00:39:28,070
И, наконец, в этом третьем примере, где всё
стало немного сложнее

816
00:39:28,070 --> 00:39:31,040
и мы должны начать перетаскивать эти кусочки

817
00:39:31,040 --> 00:39:33,300
обратите внимание, что это та же идея.

818
00:39:33,300 --> 00:39:36,680
Входных данных теперь два: привет и ответ.

819
00:39:36,680 --> 00:39:39,530
они идут в функцию под названием Join, вывод

820
00:39:39,530 --> 00:39:41,990
из которых должен быть привет, запятая, Дэвид.

821
00:39:41,990 --> 00:39:47,850
Но теперь мы хотим передать этот вывод в
качестве ввода в блок Say

822
00:39:47,850 --> 00:39:52,467
так что окончательный результат привет, Дэвид,
от кота.

823
00:39:52,467 --> 00:39:54,800
Таким образом, даже с простейшими
кусочками головоломки,

824
00:39:54,800 --> 00:39:59,210
все вписывается в эту же модель решения проблем.

825
00:39:59,210 --> 00:40:01,430
Но давайте теперь сделаем вещи немного интереснее.

826
00:40:01,430 --> 00:40:04,520
Вместо того, чтобы разговаривать с котом,
давайте продолжим

827
00:40:04,520 --> 00:40:06,590
и пусть он сделает другие вещи.

828
00:40:06,590 --> 00:40:08,620
Продолжим со звуком, например,

829
00:40:08,620 --> 00:40:11,810
Здесь есть розовый блок под названием Play
Sound Meow

830
00:40:11,810 --> 00:40:12,860
пока не выполнено.

831
00:40:12,860 --> 00:40:15,996
Я остановлю старую программу и запущу новую.

832
00:40:17,480 --> 00:40:17,980
ХОРОШО.

833
00:40:17,980 --> 00:40:19,833
Пронзительно, но мило.

834
00:40:19,833 --> 00:40:21,250
И если вы хотите услышать это снова -

835
00:40:22,450 --> 00:40:23,700
Я могу нажать на зеленый флаг

836
00:40:24,660 --> 00:40:26,080
Могу нажать на зеленый флаг.

837
00:40:26,080 --> 00:40:31,180
Конечно, это довольно скучный кот

838
00:40:31,180 --> 00:40:32,650
Мяукает только один раз

839
00:40:32,650 --> 00:40:37,060
Как мы можем заставить его мяукать
каждые несколько секунд?

840
00:40:37,060 --> 00:40:39,235
Какую идею мы могли бы использовать здесь?

841
00:40:39,235 --> 00:40:40,110
АУДИТОРИЯ:

842
00:40:40,110 --> 00:40:41,530
ДЭВИД МАЛАН: Да, петля или цикл.

843
00:40:41,530 --> 00:40:44,090
В Scratch есть несколько способов сделать это.

844
00:40:44,090 --> 00:40:47,170
Я открою Control, вы увидите пару блоков здесь.

845
00:40:47,170 --> 00:40:50,800
Повторите несколько раз, по умолчанию, 10
или бесконечно.

846
00:40:50,800 --> 00:40:53,140
Сделаем это бесконечно.

847
00:40:54,627 --> 00:40:56,710
Перетащу это сюда.

848
00:40:56,710 --> 00:40:58,930
Могу переместить куда угодно.

849
00:40:58,930 --> 00:41:01,480
И теперь прикреплю здесь.

850
00:41:01,480 --> 00:41:02,761
Запуск.

851
00:41:06,060 --> 00:41:08,280
Это очень взволнованный кот

852
00:41:08,280 --> 00:41:11,670
Я могу успокоить его, перетаскивая это.

853
00:41:11,670 --> 00:41:15,298
Даже если нет места, оно будет расширяться.

854
00:41:16,340 --> 00:41:17,390
Секундочку.

855
00:41:17,390 --> 00:41:20,880
Эта кошка счастливее!

856
00:41:20,880 --> 00:41:23,823
Но теперь, когда можем заставить кота
делать что-то бесконечно

857
00:41:23,823 --> 00:41:26,240
Пусть это не будет простой повтор

858
00:41:26,240 --> 00:41:29,780
Он может взаимодействовать со мной или
его окружением.

859
00:41:29,780 --> 00:41:31,910
Так что вместо воспроизведения звука

860
00:41:31,910 --> 00:41:33,320
Прогуляемся?

861
00:41:33,320 --> 00:41:37,080
Вместо того, чтобы воспроизводить звук,
попробуем такое.

862
00:41:37,080 --> 00:41:42,020
Перейду к Sensing и ...

863
00:41:42,020 --> 00:41:43,520
что здесь можно сделать?

864
00:41:43,520 --> 00:41:50,210
Давайте продолжим с Motion, и укажем на
указатель мыши.

865
00:41:50,210 --> 00:41:54,180
Навести курсор на указатель мыши, а затем
сделать несколько шагов

866
00:41:54,180 --> 00:41:57,690
И он будет двигаться на один шаг или точку
или пиксель за раз.

867
00:41:57,690 --> 00:42:00,050
И вот теперь мы получим такой эффект.

868
00:42:00,050 --> 00:42:03,200
Похоже, что теперь он будет следовать за
мной, верно?

869
00:42:03,200 --> 00:42:06,020
И когда я перемещаю курсор, он всегда смотрит

870
00:42:06,020 --> 00:42:08,050
в направлении курсора, затем перемещается на
один шаг.

871
00:42:08,050 --> 00:42:09,300
Конечно, немного медленно.

872
00:42:09,300 --> 00:42:10,508
Остановимся.

873
00:42:10,508 --> 00:42:15,620
Если делать 10 шагов за раз, или 10 точек
на экране,

874
00:42:15,620 --> 00:42:17,990
теперь немного сложнее увернуться.

875
00:42:17,990 --> 00:42:19,580
...

876
00:42:19,580 --> 00:42:22,770
он буквально движется за курсором

877
00:42:22,770 --> 00:42:23,270
Отлично.

878
00:42:23,270 --> 00:42:26,210
Теперь, когда у нас есть возможность делать
что-то снова и снова,

879
00:42:26,210 --> 00:42:27,620
давайте кое-что посчитаем.

880
00:42:27,620 --> 00:42:32,000
Я возьму кое-что из интернета.

881
00:42:32,000 --> 00:42:36,140
На веб-сайте CS50 мы предоставляем примеры
и исходники

882
00:42:36,140 --> 00:42:37,520
код из каждого класса.

883
00:42:37,520 --> 00:42:41,130
И на этот раз я хочу забрать сюда эту овцу.

884
00:42:41,130 --> 00:42:43,230
вам не нужно просто использовать кота,

885
00:42:43,230 --> 00:42:44,720
можете использовать овцу, если предпочитаете.

886
00:42:44,720 --> 00:42:45,303
И посмотрим.

887
00:42:45,303 --> 00:42:49,460
Посмотрим на код, что будет делать эта овца?

888
00:42:49,460 --> 00:42:52,910
Когда щелкают по зеленому флагу, эта
оранжевая часть головоломки

889
00:42:52,910 --> 00:42:54,138
называется счетчик.

890
00:42:54,138 --> 00:42:54,680
Что это такое?

891
00:42:54,680 --> 00:42:56,630
Это пример ...

892
00:42:56,630 --> 00:42:58,790
Как мы можем назвать это?

893
00:42:58,790 --> 00:42:59,290
Да.

894
00:42:59,290 --> 00:43:00,580
Это называется переменной.

895
00:43:00,580 --> 00:43:04,050
В алгебре мы обычно используем x, y и z
для переменных.

896
00:43:04,050 --> 00:43:06,720
В программировании, когда вы хотите
сохранить какое-то значение

897
00:43:06,720 --> 00:43:09,330
в переменной, вы обычно

898
00:43:09,330 --> 00:43:11,970
даете ей более наглядное имя, потому что x, y и
z на самом деле

899
00:43:11,970 --> 00:43:14,560
не говорят программисту, который читает код,
что переменная делает.

900
00:43:14,560 --> 00:43:17,560
Поэтому мы называем эту переменную Counter
и устанавливаем ее равной 1.

901
00:43:17,560 --> 00:43:19,480
Итак, что овца собирается делать?

902
00:43:19,480 --> 00:43:21,490
Сказать переменную Counter на одну секунду,

903
00:43:21,490 --> 00:43:23,490
потом подождать секунду, а затем

904
00:43:23,490 --> 00:43:28,200
добавить 1 к счетчику в качестве последнего шага.

905
00:43:28,200 --> 00:43:31,710
Итак, получилась считающая овца!

906
00:43:31,710 --> 00:43:39,000
Счет будет постоянно увеличиваться от 1 до 2
и далее.

907
00:43:39,000 --> 00:43:43,110
И, если мы оставим так, до бесконечности.

908
00:43:43,110 --> 00:43:45,870
Итак, у нас есть переменные,

909
00:43:45,870 --> 00:43:48,390
что если мы сделаем программу более интерактивной

910
00:43:48,390 --> 00:43:50,130
и начнем сохранять информацию?

911
00:43:50,130 --> 00:43:54,240
Перейду к нашим примерам,

912
00:43:54,240 --> 00:43:56,700
и вместо этого возьму другой.

913
00:43:56,700 --> 00:43:59,280
Вернусь в Studio в Scratch,

914
00:43:59,280 --> 00:44:02,460
где находятся все эти примеры.

915
00:44:02,460 --> 00:44:05,430
Открою пример под названием pet0.

916
00:44:05,430 --> 00:44:07,710
В информатике принято считать с нуля

917
00:44:07,710 --> 00:44:10,710
потому что это обозначает выключенные лампочки.

918
00:44:10,710 --> 00:44:13,020
И вот теперь программа, если я нажму Старт

919
00:44:13,020 --> 00:44:16,530
Поначалу, похоже, ничего не делает,

920
00:44:16,530 --> 00:44:18,330
но заметьте, когда я наведу курсор на ...

921
00:44:20,630 --> 00:44:24,050
- Сейчас я глажу кошку, так сказать.

922
00:44:24,050 --> 00:44:25,610
Как это работает?

923
00:44:25,610 --> 00:44:29,840
Тоже просто всегда слушает и ждет, когда
что-то случится.

924
00:44:29,840 --> 00:44:33,320
Это делает цикл, затем, если есть
прикосновение мыши,

925
00:44:33,320 --> 00:44:35,120
Играет звук Meow.

926
00:44:35,120 --> 00:44:38,880
Теперь кот реагирует на курсор мыши, но не
следует за курсором,

927
00:44:38,880 --> 00:44:42,860
а отвечает только, если курсор находится над ним.

928
00:44:42,860 --> 00:44:46,370
Это работает иначе во второй версии программы,

929
00:44:46,370 --> 00:44:50,480
pet1, потому что мы начали с pet0.

930
00:44:50,480 --> 00:44:52,970
Что я не должен делать в этой программе?

931
00:44:58,680 --> 00:45:00,090
Может быть, не гладить этого кота.

932
00:45:00,090 --> 00:45:00,930
Почему?

933
00:45:00,930 --> 00:45:05,440
На этот раз он всегда проверяет, касаюсь ли я
его указателем мыши.

934
00:45:05,440 --> 00:45:08,700
И если это так, то, очевидно, будет звучать рёв,

935
00:45:08,700 --> 00:45:12,460
иначе звучит Мяу, что и происходит.

936
00:45:12,460 --> 00:45:13,492
Итак, поехали.

937
00:45:18,690 --> 00:45:19,860
Так что не гладьте кота.

938
00:45:19,860 --> 00:45:23,150
Итак, это просто условие, задающее вопрос,
так называемое булево

939
00:45:23,150 --> 00:45:26,053
выражение при касании указателя мыши.

940
00:45:26,053 --> 00:45:28,220
Теперь давайте сделаем что-нибудь немного
более интересное.

941
00:45:28,220 --> 00:45:30,660
Приступим.

942
00:45:30,660 --> 00:45:34,160
Сделаем это с нуля.

943
00:45:34,160 --> 00:45:36,650
Я начну с события.

944
00:45:36,650 --> 00:45:41,840
При нажатии на зеленый флаг совершается движение.

945
00:45:41,840 --> 00:45:45,800
Установлю поворот слева направо

946
00:45:49,520 --> 00:45:50,960
Перейдем в Control

947
00:45:50,960 --> 00:45:52,730
Я сделаю следующее

948
00:45:52,730 --> 00:45:56,387
Предположим, я хочу, чтобы кот двигался на
экране из стороны в сторону.

949
00:45:56,387 --> 00:45:58,970
Первое, что мне нужно сделать, это оживить его
и на самом деле

950
00:45:58,970 --> 00:46:00,410
заставить его начать двигаться.

951
00:46:00,410 --> 00:46:03,680
Лучший способ сделать это - пойти в Motion

952
00:46:03,680 --> 00:46:07,400
и переместить его на некоторое количество
шагов, 10 шагов, чтобы двигаться быстро

953
00:46:07,400 --> 00:46:08,510
или один шаг, чтобы двигаться медленно.

954
00:46:08,510 --> 00:46:11,780
Но я могу проверить условие каждый раз,
когда кошка двигается.

955
00:46:11,780 --> 00:46:14,420
Я могу спросить что-то вроде этого.

956
00:46:14,420 --> 00:46:18,702
Если что-то верно, продолжайте и,
возможно, сделайте что-нибудь еще.

957
00:46:18,702 --> 00:46:19,910
Так что кот отскочит от стены.

958
00:46:19,910 --> 00:46:24,673
Как мне сказать, что, если кот коснется края,
надо идти назад?

959
00:46:24,673 --> 00:46:27,590
Нам нужно что-то вроде этого.

960
00:46:27,590 --> 00:46:32,030
Если прикоснуться не к указателю мыши, но к краю,

961
00:46:32,030 --> 00:46:35,150
маленький выпадающий список, выбрать нужное.

962
00:46:35,150 --> 00:46:38,180
Теперь я могу переместить это логическое
выражение на место.

963
00:46:38,180 --> 00:46:40,070
Условие увеличится, чтобы вместить.

964
00:46:40,070 --> 00:46:41,630
И что я хочу сейчас сделать?

965
00:46:41,630 --> 00:46:44,660
Если он коснется края, я собираюсь сказать

966
00:46:44,660 --> 00:46:50,900
поворот, но не на 15 градусов, а на 180.

967
00:46:50,900 --> 00:46:56,530
И теперь у нас есть своя маленькая анимация,
где он идет туда-сюда

968
00:46:56,530 --> 00:46:57,930
и туда и обратно.

969
00:46:57,930 --> 00:46:59,680
Конечно, это выглядит странно

970
00:46:59,680 --> 00:47:04,240
что он просто радостно бегает,

971
00:47:04,240 --> 00:47:05,230
давайте это поправим.

972
00:47:05,230 --> 00:47:11,390
Вы можете включить микрофон и сказать «ой».

973
00:47:11,390 --> 00:47:13,430
Вот как выглядит "Ой".

974
00:47:13,430 --> 00:47:18,380
Я сохраню это, назову "Ой", и вернусь к
моему коду.

975
00:47:18,380 --> 00:47:23,540
Продолжим и добавим звук, не звук Мяу

976
00:47:23,540 --> 00:47:28,022
но, лучше, звук Ой, такой, что теперь этот кот--

977
00:47:32,750 --> 00:47:33,530
ХОРОШО.

978
00:47:33,530 --> 00:47:36,510
Немного более динамично.

979
00:47:36,510 --> 00:47:39,120
Однако, на самом деле кот не идет и не бежит.

980
00:47:39,120 --> 00:47:39,870
Он действительно просто ...

981
00:47:40,370 --> 00:47:42,140
- скользит по экрану, верно?

982
00:47:42,140 --> 00:47:44,240
Его ноги не двигаются.

983
00:47:44,240 --> 00:47:45,480
Почему так?

984
00:47:45,480 --> 00:47:48,230
Ну, получается, что костюм, который носит
этот спрайт,

985
00:47:48,230 --> 00:47:49,820
это просто картинка.

986
00:47:49,820 --> 00:47:51,980
Это изображение из множества маленьких точек.

987
00:47:51,980 --> 00:47:52,730
И знаете, что?

988
00:47:52,730 --> 00:47:55,970
Чтобы оживить персонажа, так сказать,

989
00:47:55,970 --> 00:47:58,730
все, что нам нужно, это как минимум еще
одна картинка.

990
00:47:58,730 --> 00:48:01,970
анимированный GIF или видео - это просто
несколько картинок.

991
00:48:01,970 --> 00:48:04,070
Итак, вот первая, вот вторая.

992
00:48:04,070 --> 00:48:06,020
Вот первая, вот вторая.

993
00:48:06,020 --> 00:48:09,230
И хотя он движется резковато,

994
00:48:09,230 --> 00:48:11,030
если менять картинки достаточно быстро,
будет казаться,

995
00:48:11,030 --> 00:48:13,760
что кот на самом деле совершает движения

996
00:48:13,760 --> 00:48:15,980
и ходит, а не просто скользит.

997
00:48:15,980 --> 00:48:18,030
Пойдем дальше и сделаем это.

998
00:48:18,030 --> 00:48:21,050
Открою этот пример, который я сделал заранее.

999
00:48:21,050 --> 00:48:22,670
Это называется bounce1.

1000
00:48:22,670 --> 00:48:28,220
Как и в bounce0, здесь у меня есть
вторая картинка.

1001
00:48:28,220 --> 00:48:31,910
Если я нажму «Посмотреть внутри» и нажму
«Играть сейчас»,

1002
00:48:31,910 --> 00:48:34,160
вы заметите, что он немного двигается.

1003
00:48:34,160 --> 00:48:38,180
Это немного неровно, потому что он
действительно перемещается из одной позиции
в другую

1004
00:48:38,180 --> 00:48:41,543
быстро, но теперь это иллюзия движения.

1005
00:48:41,543 --> 00:48:43,460
Так что если вы когда-нибудь играли в игру или
вы когда-либо

1006
00:48:43,460 --> 00:48:45,830
создавали самостоятельно анимацию или даже фильм,

1007
00:48:45,830 --> 00:48:49,608
это действительно то, что происходит под капотом.

1008
00:48:49,608 --> 00:48:52,400
Но вам не обязательно иметь в программе
только одного кота или один спрайт.

1009
00:48:52,400 --> 00:48:53,690
На самом деле мы можем иметь несколько.

1010
00:48:53,690 --> 00:48:56,570
Я пойду дальше и добавлю сюда еще одно животное.

1011
00:48:56,570 --> 00:48:58,220
Это морской лев

1012
00:48:58,220 --> 00:49:01,520
Итак, с этим морским львом, если я загляну
внутрь и открою его код,

1013
00:49:01,520 --> 00:49:03,120
Здесь много

1014
00:49:03,120 --> 00:49:04,850
Итак, давайте посмотрим, что эта программа
делает в первую очередь.

1015
00:49:04,850 --> 00:49:06,517
Если я нажму на зеленый флаг

1016
00:49:08,240 --> 00:49:09,830
- это действительно очень раздражает.

1017
00:49:11,360 --> 00:49:12,590
Теперь, почему это так работает?

1018
00:49:12,590 --> 00:49:16,380
Ясно, что здесь какой-то цикл, который
повторяет действие

1019
00:49:16,380 --> 00:49:18,020
снова и снова.

1020
00:49:18,020 --> 00:49:24,760
Как, основываясь на этом коде, я могу
помешать морскому льву лаять?

1021
00:49:24,760 --> 00:49:25,260
Да.

1022
00:49:25,260 --> 00:49:26,630
Вот решение.

1023
00:49:26,630 --> 00:49:31,830
Давайте нажмем пробел.

1024
00:49:31,830 --> 00:49:34,050
Почему это заставило его перестать лаять?

1025
00:49:34,050 --> 00:49:35,190
Хорошо, обратите внимание.

1026
00:49:35,190 --> 00:49:37,133
В этой программе есть два сценария, которые

1027
00:49:37,133 --> 00:49:38,550
немного отличаются от увиденного ранее.

1028
00:49:38,550 --> 00:49:40,508
Каждый из них представляет собой скрипт
или программу.

1029
00:49:40,508 --> 00:49:43,800
Обратите внимание, что здесь есть
переменная muted, и по умолчанию это false.

1030
00:49:43,800 --> 00:49:44,520
Выключено.

1031
00:49:44,520 --> 00:49:47,190
Так что muted - это ложь, или ноль, что
означает, что он не приглушен,

1032
00:49:47,190 --> 00:49:48,510
вот почему мы слышим это.

1033
00:49:48,510 --> 00:49:50,190
Тогда этот цикл работает так.

1034
00:49:50,190 --> 00:49:55,350
Если нажата клавиша, продолжайте и
проверьте следующий вопрос.

1035
00:49:55,350 --> 00:50:00,220
Если параметр muted имеет значение true,
измените значение muted на false, иначе
измените значение muted на true.

1036
00:50:00,220 --> 00:50:02,220
Это очень распространенный подход
в программировании

1037
00:50:02,220 --> 00:50:04,887
Если у вас есть переменная, как то, что
называется muted, это

1038
00:50:04,887 --> 00:50:08,130
либо true или false, 1 или 0, вкл или выкл

1039
00:50:08,130 --> 00:50:10,890
вы можно изменить его значение, просто задав
этот вопрос.

1040
00:50:10,890 --> 00:50:15,450
Если параметр muted имеет значение true,
измените его на false, иначе установите
значение true.

1041
00:50:15,450 --> 00:50:19,140
Между тем, если мы прокручиваем вверх, здесь
есть еще один сценарий

1042
00:50:19,140 --> 00:50:21,240
Повторяющийся снова и снова.

1043
00:50:21,240 --> 00:50:22,620
И я увеличу это.

1044
00:50:22,620 --> 00:50:26,940
Когда щелкнули по зеленому флагу, морской
лев делал и это тоже.

1045
00:50:26,940 --> 00:50:29,760
Если muted - это false, то есть, если он
не отключен,

1046
00:50:29,760 --> 00:50:33,150
включи звук морского льва и скажи привет,
привет, привет

1047
00:50:33,150 --> 00:50:35,580
в течение двух секунд, а затем подожди
одну секунду.

1048
00:50:35,580 --> 00:50:38,220
И делай это снова и снова и снова.

1049
00:50:38,220 --> 00:50:42,150
Таким образом, в некоторых
языках программировании, как в Scratch здесь,
вы можете делать несколько вещей одновременно

1050
00:50:42,150 --> 00:50:44,400
так что два потока работают параллельно

1051
00:50:44,400 --> 00:50:47,790
если необходимо

1052
00:50:47,790 --> 00:50:52,300
И они могут взаимодействовать, используя
что-то вроде переменной.

1053
00:50:52,300 --> 00:50:55,230
Давайте посмотрим на один последний пример
с участием двух разных спрайтов,

1054
00:50:55,230 --> 00:50:58,500
это старая школьная игра, которую вы, может
быть, помните

1055
00:50:58,500 --> 00:50:59,790
называется Марко Поло.

1056
00:50:59,790 --> 00:51:02,790
В этой игре Марко Поло один человек кричит

1057
00:51:02,790 --> 00:51:05,790
Марко и один или несколько других людей
кричат ​​Поло.

1058
00:51:05,790 --> 00:51:07,830
И первый из них, как правило, с
завязанными глазами,

1059
00:51:07,830 --> 00:51:11,520
пытаетется найти второго человека,
основываясь только

1098
00: 51: 11520 -> 00: 51: 12520
на его или ее голосе.

1099
00: 51: 12520 -> 00: 51: 16,290
Так что в этой программе, если я продолжу и
нажму на зеленый флаг,

1060
00:51:16,290 --> 00:51:20,850
заметьте, что пока ничего не произойдет, пока я
не нажму пробел.

1061
00:51:20,850 --> 00:51:25,260
И мы увидим, что оранжевая марионетка
говорит Марко, а синяя марионетка

1062
00:51:25,260 --> 00:51:26,490
говорит Поло.

1063
00:51:26,490 --> 00:51:27,690
Но как это работает?

1064
00:51:27,690 --> 00:51:30,490
Ну, вот код для оранжевой марионетки.

1065
00:51:30,490 --> 00:51:33,720
он делает следующее.

1066
00:51:33,720 --> 00:51:38,010
Если нажата клавиша, это пробел, скажем Марко
в течение двух секунд,

1067
00:51:38,010 --> 00:51:39,340
но потом еще одна особенность.

1068
00:51:39,340 --> 00:51:40,050
Кое-что новое.

1069
00:51:40,050 --> 00:51:41,822
Он транслирует то, что называется событием.

1070
00:51:41,822 --> 00:51:43,530
Компьютеры не могут просто взять и

1071
00:51:43,530 --> 00:51:46,530
посмотреть, что делает другая программа
или спрайт,

1072
00:51:46,530 --> 00:51:48,900
но они могут слушать то, что называется событием.

1073
00:51:48,900 --> 00:51:51,720
Это своего рода сообщение от одной программы
к другим.

1074
00:51:51,720 --> 00:51:56,220
Так что трансляция события - это еще один
кусочек пазла, которая может просто
передать событие.

1075
00:51:56,220 --> 00:51:59,070
И теперь, обратите внимание, если я нажму не
на оранжевую марионетку здесь,

1076
00:51:59,070 --> 00:52:02,580
а на синюю. У синей марионетки еще меньше кода,

1077
00:52:02,580 --> 00:52:05,430
но он не ждет нажатия зеленого флажка.

1078
00:52:05,430 --> 00:52:09,120
Вместо этого он ждет, пока не получит то самое

1079
00:52:09,120 --> 00:52:12,750
событие, своего рода сообщение от одного спрайта
к другим.

1080
00:52:12,750 --> 00:52:19,980
И как только он получает это событие, он
говорит Поло на две секунды.

1081
00:52:19,980 --> 00:52:20,550
Отлично.

1082
00:52:20,550 --> 00:52:23,430
Таким образом, оказывается, что есть
лучшие способы

1083
00:52:23,430 --> 00:52:25,140
решить некоторые из этих проблем.

1084
00:52:25,140 --> 00:52:30,310
И мы можем начать думать немного больше о дизайне,

1085
00:52:30,310 --> 00:52:32,250
качестве вашего кода.

1086
00:52:32,250 --> 00:52:35,040
Я пойду дальше и сделаю это.

1087
00:52:35,040 --> 00:52:38,430
Под событиями, я буду реагировать, когда
нажимают зеленый флаг,

1088
00:52:38,430 --> 00:52:40,740
и на этот раз я скажу кое-что

1089
00:52:40,740 --> 00:52:45,750
Давайте кашлянем на одну секунду, вот так.

1090
00:52:45,750 --> 00:52:49,307
А затем подождем несколько секунд, например одну.

1091
00:52:49,307 --> 00:52:50,265
А потом

1092
00:52:50,265 --> 00:52:51,840
Пойдем вперед и кашлянем три раза.

1093
00:52:51,840 --> 00:52:53,820
Это не редкость в реальном мире, когда ты кашляешь

1094
00:52:53,820 --> 00:52:54,885
три раза подряд.

1095
00:52:54,885 --> 00:52:56,760
Итак, я щелкну правой кнопкой мыши

1096
00:52:56,760 --> 00:52:59,843
дублировать, и просто прикрепить еще раз.

1097
00:52:59,843 --> 00:53:02,910
И еще раз

1098
00:53:02,910 --> 00:53:09,280
И теперь, конечно, кошка будет кашлять три раза

1099
00:53:09,280 --> 00:53:10,780
три раза подряд.

1100
00:53:10,780 --> 00:53:12,250
Этот код правильный.

1101
00:53:12,250 --> 00:53:15,460
Он кашляет три раза и ждет одну секунду
после каждого,

1102
00:53:15,460 --> 00:53:17,080
но это не очень хороший код.

1143
00: 53: 17 080 -> 00: 53: 20 500
Он не очень хорошо продуман, как сказал
бы программист.

1103
00:53:20,500 --> 00:53:23,975
Что мы могли бы сделать с этим кодом на
основе идей, которые видели до сих пор?

1104
00:53:23,975 --> 00:53:24,850
АУДИТОРИЯ:

1105
00:53:24,850 --> 00:53:25,080
ДЭВИД МАЛАН: Да.

1106
00:53:25,080 --> 00:53:26,810
Так что вместо этого мы можем сделать цикл, верно?

1107
00:53:26,810 --> 00:53:29,320
И Копировать-Вставить редко является
хорошим решением

1108
00:53:29,320 --> 00:53:33,080
в программировании, будь то в Scratch или в C
или Python или других языках.

1109
00:53:33,080 --> 00:53:35,140
Так что я собираюсь выбросить все это.

1110
00:53:35,140 --> 00:53:37,440
Пойдем дальше и просто возьмем блок повторений,

1111
00:53:37,440 --> 00:53:39,490
изменим это значение с десяти по умолчанию
до трех.

1112
00:53:39,490 --> 00:53:42,040
Возьмем эту пару блоков и положим их сюда,

1113
00:53:42,040 --> 00:53:43,880
перетащим это сюда.

1114
00:53:43,880 --> 00:53:48,040
Так что теперь я пойду дальше и повторю три
раза, скажем, кашель на секунду,

1115
00:53:48,040 --> 00:53:49,150
а затем подождем одну секунду.

1116
00:53:49,150 --> 00:53:52,240
И теперь программа лучше разработана.

1117
00:53:52,240 --> 00:53:55,000
Результат не отличается от прежнего, но
это немного проще

1118
00:53:55,000 --> 00:53:57,370
поддерживать сейчас для меня или кого-то
еще, потому что если я

1119
00:53:57,370 --> 00:54:00,950
хочу изменить, как долго что-то происходит или
что говорят,

1120
00:54:00,950 --> 00:54:04,150
Я могу изменить это сейчас в одном месте
вместо нескольких.

1121
00:54:04,150 --> 00:54:07,930
Но есть и другая идея в информатике, это
понятие абстракции.

1163
00: 54: 07,930 -> 00: 54: 10570
Это программа, которая

1164
00: 54: 10570 -> 00: 54: 12,490
кашляет,

1122
00:54:12,490 --> 00:54:16,660
Но что, если я хочу использовать это в
другихы программах

1123
00:54:16,660 --> 00:54:19,450
я хочу дать себе кусок головоломки, который

1124
00:54:19,450 --> 00:54:22,150
не придется разрабатывать с нуля в
другой программе?

1125
00:54:22,150 --> 00:54:25,870
Здесь есть такая возможность,

1126
00:54:25,870 --> 00:54:27,130
и я могу сделать свой блок.

1127
00:54:27,130 --> 00:54:29,080
Я назову этот блок кашель.

1128
00:54:29,080 --> 00:54:34,300
И этот кусок головоломки, как только я нажму
ОК, даст мне этот розовый блок

1129
00:54:34,300 --> 00:54:35,050
Вот.

1130
00:54:35,050 --> 00:54:38,620
Я перенесу это все

1131
00:54:38,620 --> 00:54:40,570
в новый блок

1132
00:54:40,570 --> 00:54:44,290
Обратите внимание, поскольку я сделал новый
блок, у меня есть этот розовый кусок здесь.

1133
00:54:44,290 --> 00:54:46,950
Теперь я могу перенести это сюда.

1134
00:54:46,150 --> 00:54:48,190
с глаз долой, из сердца вон

1135
00:54:48,190 --> 00:54:52,510
Я могу игнорировать эти кусочки,

1136
00:54:52,510 --> 00:54:55,660
потому что теперь у меня есть новый кусок

1137
00:54:55,660 --> 00:54:57,280
который называется кашель, который это и делает.

1138
00:54:57,280 --> 00:54:59,380
Это абстракция в том смысле, что

1139
00:54:59,380 --> 00:55:04,062
Мне все равно, как вы осуществляете кашель,
мне просто важно, чтобы ваша программа кашляла.

1140
00:55:04,062 --> 00:55:05,770
И поэтому у нас есть это понятие
повторного использования

1141
00:55:05,770 --> 00:55:08,780
что делает наш код не менее сложным, но намного,

1142
00:55:08,780 --> 00:55:12,358
намного меньше и менее подверженым ошибкам.

1143
00:55:12,358 --> 00:55:13,900
И я могу сделать еще один шаг вперед.

1144
00:55:13,900 --> 00:55:17,770
Позвольте мне пойти дальше и открыть
другой вариант этого,

1145
00:55:17,770 --> 00:55:19,240
это в cough3.

1146
00:55:19,240 --> 00:55:23,388
Эти пользовательские кусочки могут
принимать аргументы.

1147
00:55:23,388 --> 00:55:25,180
Вы можете настроить этот блок под названием кашель

1148
00:55:25,180 --> 00:55:28,660
скажем, сколько раз ты хочешь кашлять, тем
самым принимая входные данные.

1149
00:55:28,660 --> 00:55:34,340
Затем вы можете повторить это указанное
количество раз

1150
00:55:34,340 --> 00:55:37,310
Так что если вы хотите сейчас использовать
это здесь,

1151
00:55:37,310 --> 00:55:40,060
Обратите внимание, что теперь это выглядит
еще проще.

1152
00:55:40,060 --> 00:55:42,130
Давай, кашляй три раза.

1153
00:55:42,130 --> 00:55:44,530
И все абстрагировано.

1154
00:55:44,530 --> 00:55:46,810
Если я прокручиваю вверх и в сторону, даже не

1155
00:55:46,810 --> 00:55:51,010
видно то, как именно был реализован кашель.

1156
00:55:51,010 --> 00:55:52,990
Итак, мы начали весь этот разговор

1157
00:55:52,990 --> 00:55:56,590
с поисков Майка Смита и пытаясь найти
правильное решение

1158
00:55:56,590 --> 00:56:01,180
мы говорили об эффективности решения

1159
00:56:01,180 --> 00:56:03,610
Чтобы оно было не только точное, но и быстрое.

1160
00:56:03,610 --> 00:56:06,100
А теперь мы немного поработали с идеями

1161
00:56:06,100 --> 00:56:10,370
помогающими, когда дело доходит до качества
вашего кода.

1162
00:56:10,370 --> 00:56:12,050
Итак, на чем мы остановились?

1163
00:56:12,050 --> 00:56:14,680
Позвольте мне пойти дальше и показать
пару заключительных примеров

1164
00:56:14,680 --> 00:56:18,670
Первый из них, я сам сделал в свое время.

1165
00:56:18,670 --> 00:56:23,500
Когда я впервые начал использовать Scratch,

1166
00:56:23,500 --> 00:56:26,470
написал эту программу под названием Oscar Time.

1167
00:56:26,470 --> 00:56:30,820
Oscar Time, напоминающий старую песню
ворчуна Оскара,

1168
00:56:30,820 --> 00:56:31,420
Делает вот это.

1169
00:56:31,920 --> 00:56:33,070
Вот такая картинка.

1170
00:56:33,070 --> 00:56:35,070
Обратите внимание на фонарный столб и
мусорную корзину.

1171
00:56:35,070 --> 00:56:37,150
И что-то падает с неба

1172
00:56:37,150 --> 00:56:39,700
похоже на кусок мусора, это просто спрайт.

1173
00:56:39,700 --> 00:56:43,000
Примерно то же, что и кот, но я сменил кота на это

1174
00:56:43,000 --> 00:56:44,530
кусок мусора.

1175
00:56:44,530 --> 00:56:47,890
обратите внимание, если я перемещу свой
курсор, нажму и потяну

1176
00:56:47,890 --> 00:56:52,360
этот кусок мусора следует за курсором так же,
как раньше Скретч

1177
00:56:52,360 --> 00:56:54,430
следовал за моим курсором

1178
00:56:54,430 --> 00:56:56,440
И обратите внимание, если я перенесу его
к мусорному ведру,

1179
00:56:56,440 --> 00:57:00,330
Крышка открывается, это проверяется условием.

1180
00:57:00,330 --> 00:57:03,370
Если мусор возле мусорного бака, то
открой мусорный бак.

1181
00:57:03,370 --> 00:57:06,190
И открыть, конечно, просто значит сменить картинку

1182
00:57:06,190 --> 00:57:09,160
показать другое изображение вместо оригинала,

1183
00:57:09,160 --> 00:57:11,420
очень простая идея анимации.

1184
00:57:11,420 --> 00:57:17,100
А теперь, когда я отпущу, если прикоснуться
к мусорному ведру и отпустить,

1185
00:57:17,100 --> 00:57:21,390
Оскар вылезет из мусорного ведра, скажет мой счет,

1186
00:57:21,390 --> 00:57:22,688
а затем игра продолжается.

1187
00:57:22,688 --> 00:57:23,980
Теперь падает больше мусора.

1188
00:57:23,980 --> 00:57:25,610
Сделаем это.

1189
00:57:25,610 --> 00:57:28,870
И вы увидите, что из простые идеи вроде
условий, циклов,

1190
00:57:28,870 --> 00:57:31,000
переменных и логических выражений вместе

1191
00:57:31,000 --> 00:57:34,030
Можно составить довольно интерактивную игру.

1192
00:57:34,030 --> 00:57:36,520
Эта игра заняла у меня всего около восьми часов,

1193
00:57:36,520 --> 00:57:39,700
потому, что я не сел и сделал все сразу.

1194
00:57:39,700 --> 00:57:41,328
а делал маленькие шаги, так сказать.

1195
00:57:41,328 --> 00:57:44,620
Сначала сделал легкую часть, нашел
изображение Улицы Сезам,

1196
00:57:44,620 --> 00:57:45,870
поставил его на сцену и бум.

1197
00:57:45,870 --> 00:57:48,540
По крайней мере, в первой версии, все, что
было, это Улица Сезам.

1198
00:57:48,540 --> 00:57:49,940
И это вовсе не интерактивно.

1199
00:57:49,940 --> 00:57:52,630
Затем я добавил спрайт, которому вместо кошки,

1200
00:57:52,630 --> 00:57:54,940
Я поставил картинку куска мусора.

1201
00:57:54,940 --> 00:57:57,550
И я написал код, то есть составил кусочки,

1202
00:57:57,550 --> 00:58:00,220
чтобы этот кусок упал с неба

1203
00:58:00,220 --> 00:58:02,410
а затем остановился, когда он на краю,

1204
00:58:02,410 --> 00:58:05,643
как раньше кот отскакивал, касаясь края.

1205
00:58:05,643 --> 00:58:07,060
И теперь все становится сложнее.

1206
00:58:07,060 --> 00:58:08,435
Игра становится более сложной.

1207
00:58:08,435 --> 00:58:13,450
Все больше и больше спрайтов, которые просто
идут в ногу с музыкой.

1208
00:58:13,450 --> 00:58:16,090
довольно много усилий, но это все сводится

1209
00:58:16,090 --> 00:58:21,500
ровно к тем же принципам, что и все
остальные программы.

1210
00:58:21,500 --> 00:58:23,500
И теперь я

1211
00:58:23,500 --> 00:58:27,948
приглашаю еще одного добровольца подняться, ...

1212
00:58:27,948 --> 00:58:28,990
Хорошо, я вижу вашу руку.

1213
00:58:28,990 --> 00:58:29,470
Как вас зовут?

1214
00:58:29,470 --> 00:58:30,160
МЕГАН: Меган.

1215
00:58:30,160 --> 00:58:30,952
ДЭВИД МАЛАН: Меган.

1216
00:58:30,952 --> 00:58:34,510
Хорошо, Меган, давай сыграем в игру

1217
00:58:34,510 --> 00:58:36,910
"Самая сложная игра"

1218
00:58:36,910 --> 00:58:38,380
Хорошо, давай.

1219
00:58:38,380 --> 00:58:39,700
Рад встрече.

1220
00:58:39,700 --> 00:58:42,010
Это игра написана одним из ваших предшественников,

1221
00:58:42,010 --> 00:58:45,700
Который реализовал это в качестве домашней
работы первой недели.

1222
00:58:45,700 --> 00:58:49,510
Вы увидите инструкции на экране.

1223
00:58:49,510 --> 00:58:54,480
Посмотрим, сможем ли мы вдохновить
людей поддержать вас.

1224
00:58:54,480 --> 00:59:00,000
И после этого, как принято в CS50, приступим
к кексам.

1225
00:59:00,000 --> 00:59:03,423
Итак, Меган, здесь для тебя, Самая сложная игра.

1226
00:59:03,423 --> 00:59:05,340
Раскроем окно полностью

1227
00:59:05,340 --> 00:59:07,200
Нажмем Начать, и увидим инструкции.

1228
00:59:07,200 --> 00:59:07,890
МЕГАН: ОК.

1229
00:59:07,890 --> 00:59:08,858
ДЭВИД МАЛАН: Удачи.

1230
00:59:08,858 --> 00:59:10,322
МЕГАН: Спасибо.

1231
00:59:13,128 --> 00:59:15,170
ДЭВИД МАЛАН: Давайте увеличим громкость.

1232
00:59:15,170 --> 00:59:16,913
Вот так.

1233
00:59:18,998 --> 00:59:20,276
Не могу прикоснуться к этому.

1234
00:59:20,276 --> 00:59:24,360
ДЭВИД МАЛАН: Итак, вы будете нажимать клавиши
со стрелками и перемещаться,

1235
00:59:24,360 --> 00:59:26,580
... о да ... через лабиринт.

1236
00:59:26,580 --> 00:59:29,400
Заметьте, Меган не в состоянии выйти за
чёрные границы

1237
00:59:29,400 --> 00:59:33,090
потому что нельзя касаться края, да.

1238
00:59:33,090 --> 00:59:36,510
Теперь, когда вы касаетесь этого спрайта,
вы переходите на следующий уровень.

1239
00:59:39,120 --> 00:59:40,230
Теперь два спрайта.

1240
00:59:42,870 --> 00:59:44,040
Еще один йель.

1241
00:59:50,340 --> 00:59:51,110
ДЭВИД МАЛАН: Отлично.

1242
00:59:51,110 --> 00:59:51,610
ХОРОШО.

1243
00:59:58,680 --> 01:00:00,620
ДЭВИД МАЛАН: Отлично.

1244
01:00:08,050 --> 01:00:09,998
ДЭВИД МАЛАН: Отлично.

1245
01:00:32,770 --> 01:00:34,070
ДЭВИД МАЛАН: ОК.

1246
01:00:34,070 --> 01:00:35,870
Хорошо.

1247
01:00:35,870 --> 01:00:36,370
Хорошо!

1248
01:00:45,220 --> 01:00:47,264

1324
01: 00: 4664 -> 01: 00: 48,518

1249
01:00:52,096 --> 01:00:53,440
ДЭВИД МАЛАН: Нет!

1250
01:00:53,440 --> 01:00:54,010
Все нормально.

1251
01:00:59,380 --> 01:00:59,880
Ой.

1252
01:00:59,880 --> 01:01:00,380
Все нормально.

1253
01:01:03,842 --> 01:01:04,342
Неплохо!

1254
01:01:09,331 --> 01:01:09,831
Ах!

1255
01:01:18,552 --> 01:01:20,010
Ой!

1256
01:01:20,010 --> 01:01:22,090
Еще пара жизней.

1257
01:01:22,090 --> 01:01:22,590
Неплохо!

1258
01:01:22,590 --> 01:01:23,090
Ой!

1259
01:01:28,890 --> 01:01:29,420
ХОРОШО.

1260
01:01:29,420 --> 01:01:30,660
Есть!

1261
01:01:30,660 --> 01:01:31,160
МЕГАН: Да.

1262
01:01:31,160 --> 01:01:32,770
Ага.

1263
01:01:32,770 --> 01:01:33,680
О Боже.

1264
01:01:33,680 --> 01:01:34,638
ДЭВИД МАЛАН: Хорошо.

1265
01:01:34,638 --> 01:01:37,100
Еще одна жизнь - еще две жизни!

1266
01:01:37,100 --> 01:01:40,360
Еще три жизни!

1267
01:01:40,360 --> 01:01:41,060
Давай.

1268
01:01:45,465 --> 01:01:46,920
ДЭВИД МАЛАН: Да!

1269
01:01:51,990 --> 01:01:52,740
МЕГАН: Вверх, вверх, вверх.

1270
01:01:58,832 --> 01:01:59,790
ДЭВИД МАЛАН: Хорошо.

1271
01:01:59,790 --> 01:02:00,310
Последняя жизнь

1272
01:02:00,310 --> 01:02:00,810
Последняя жизнь

1273
01:02:00,810 --> 01:02:02,080
Вперед, вперед!

1274
01:02:02,080 --> 01:02:02,580
Вот так.

1275
01:02:05,520 --> 01:02:06,020
Отлично.

1276
01:02:06,020 --> 01:02:07,790
Хорошо, хорошо.

1277
01:02:07,790 --> 01:02:08,530
Да да

1278
01:02:08,530 --> 01:02:10,920
Ах!

1279
01:02:10,920 --> 01:02:11,420
Отлично.

1280
01:02:11,420 --> 01:02:13,867
Аплодисменты для Меган, пожалуйста.

1281
01:02:13,867 --> 01:02:14,450
Поддержите ее

1282
01:02:14,450 --> 01:02:15,336
Ну вот.

1283
01:02:18,990 --> 01:02:20,870
Это CS50.

1284
01:02:20,870 --> 01:02:21,710
Добро пожаловать на борт.

1285
01:02:21,710 --> 01:02:23,980
Кексы поданы.
